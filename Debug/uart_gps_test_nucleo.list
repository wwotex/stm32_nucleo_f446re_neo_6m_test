
uart_gps_test_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080038a8  080038a8  000138a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003930  08003930  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003930  08003930  00013930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003938  08003938  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003938  08003938  00013938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800393c  0800393c  0001393c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  20000070  080039b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  080039b0  00020644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa62  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e1  00000000  00000000  0002ab02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0002c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  0002cc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021299  00000000  00000000  0002d2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f67  00000000  00000000  0004e589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8c64  00000000  00000000  000584f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121154  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020b8  00000000  00000000  001211a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003890 	.word	0x08003890

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003890 	.word	0x08003890

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fb62 	bl	8000c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f814 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f8f4 	bl	80007b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c8:	f000 f8a8 	bl	800071c <MX_USART2_UART_Init>
  MX_DMA_Init();
 80005cc:	f000 f8d0 	bl	8000770 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005d0:	f000 f87a 	bl	80006c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, rxBuffer, RX_BUFFER_SIZE);
 80005d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d8:	4902      	ldr	r1, [pc, #8]	; (80005e4 <main+0x2c>)
 80005da:	4803      	ldr	r0, [pc, #12]	; (80005e8 <main+0x30>)
 80005dc:	f002 f83d 	bl	800265a <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <main+0x28>
 80005e2:	bf00      	nop
 80005e4:	20000330 	.word	0x20000330
 80005e8:	200002ec 	.word	0x200002ec

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2234      	movs	r2, #52	; 0x34
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fd0a 	bl	8003014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <SystemClock_Config+0xd4>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a29      	ldr	r2, [pc, #164]	; (80006c0 <SystemClock_Config+0xd4>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <SystemClock_Config+0xd4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <SystemClock_Config+0xd8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000638:	4a22      	ldr	r2, [pc, #136]	; (80006c4 <SystemClock_Config+0xd8>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <SystemClock_Config+0xd8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000660:	2310      	movs	r3, #16
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000664:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000668:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066a:	2304      	movs	r3, #4
 800066c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800066e:	2302      	movs	r3, #2
 8000670:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000672:	2302      	movs	r3, #2
 8000674:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fc70 	bl	8001f60 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000686:	f000 f97b 	bl	8000980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2102      	movs	r1, #2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f98e 	bl	80019c8 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006b2:	f000 f965 	bl	8000980 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_USART1_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 8000700:	f001 fecc 	bl	800249c <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f939 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200002ec 	.word	0x200002ec
 8000718:	40011000 	.word	0x40011000

0800071c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_USART2_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000754:	f001 fea2 	bl	800249c <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f000 f90f 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000524 	.word	0x20000524
 800076c:	40004400 	.word	0x40004400

08000770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_DMA_Init+0x3c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <MX_DMA_Init+0x3c>)
 8000780:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_DMA_Init+0x3c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	203a      	movs	r0, #58	; 0x3a
 8000798:	f000 fbc1 	bl	8000f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800079c:	203a      	movs	r0, #58	; 0x3a
 800079e:	f000 fbda 	bl	8000f56 <HAL_NVIC_EnableIRQ>

}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b26      	ldr	r3, [pc, #152]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a25      	ldr	r2, [pc, #148]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b23      	ldr	r3, [pc, #140]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <MX_GPIO_Init+0xd0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a1e      	ldr	r2, [pc, #120]	; (8000880 <MX_GPIO_Init+0xd0>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_GPIO_Init+0xd0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a17      	ldr	r2, [pc, #92]	; (8000880 <MX_GPIO_Init+0xd0>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2120      	movs	r1, #32
 800083a:	4812      	ldr	r0, [pc, #72]	; (8000884 <MX_GPIO_Init+0xd4>)
 800083c:	f001 f8aa 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000846:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_GPIO_Init+0xd8>)
 8000858:	f000 ff08 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800085c:	2320      	movs	r3, #32
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_GPIO_Init+0xd4>)
 8000874:	f000 fefa 	bl	800166c <HAL_GPIO_Init>

}
 8000878:	bf00      	nop
 800087a:	3728      	adds	r7, #40	; 0x28
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40020000 	.word	0x40020000
 8000888:	40020800 	.word	0x40020800

0800088c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800088c:	b580      	push	{r7, lr}
 800088e:	b09c      	sub	sp, #112	; 0x70
 8000890:	af02      	add	r7, sp, #8
 8000892:	6078      	str	r0, [r7, #4]
//	sprintf(uartBuffer, "\r\n\r\nRECEIVED:\r\n\r\n");
//	HAL_UART_Transmit(&huart2, (uint8_t *)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart2, rxBuffer, RX_BUFFER_SIZE, HAL_MAX_DELAY);
	char *ret = strstr((char*)rxBuffer, "GPRMC") + 6;
 8000894:	4934      	ldr	r1, [pc, #208]	; (8000968 <HAL_UART_RxCpltCallback+0xdc>)
 8000896:	4835      	ldr	r0, [pc, #212]	; (800096c <HAL_UART_RxCpltCallback+0xe0>)
 8000898:	f002 fbe4 	bl	8003064 <strstr>
 800089c:	4603      	mov	r3, r0
 800089e:	3306      	adds	r3, #6
 80008a0:	667b      	str	r3, [r7, #100]	; 0x64
	char tmp[39];
	memcpy(tmp, ret, 38);
 80008a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008a6:	2226      	movs	r2, #38	; 0x26
 80008a8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 fba4 	bl	8002ff8 <memcpy>
	tmp[38] = '\0';
 80008b0:	2300      	movs	r3, #0
 80008b2:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	char time[10]; time[9] = '\0';
 80008b6:	2300      	movs	r3, #0
 80008b8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	char hour[3]; hour[2] = '\0';
 80008bc:	2300      	movs	r3, #0
 80008be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	char minute[3]; minute[2] = '\0';
 80008c2:	2300      	movs	r3, #0
 80008c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	char status;
	char longitude[13]; longitude[12] = '\0';
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	char latitude[14]; latitude[13] = '\0';
 80008ce:	2300      	movs	r3, #0
 80008d0:	757b      	strb	r3, [r7, #21]

	memcpy(time, tmp, 9);
 80008d2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80008d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008da:	2209      	movs	r2, #9
 80008dc:	4618      	mov	r0, r3
 80008de:	f002 fb8b 	bl	8002ff8 <memcpy>
 80008e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
	memcpy(hour, time, 2);
 80008e4:	85bb      	strh	r3, [r7, #44]	; 0x2c
	memcpy(minute, time+2, 2);
 80008e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008ea:	3302      	adds	r3, #2
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	853b      	strh	r3, [r7, #40]	; 0x28
	status = tmp[10];
 80008f2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80008f6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	memcpy(longitude, tmp+12, 12);
 80008fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008fe:	330c      	adds	r3, #12
 8000900:	f107 0018 	add.w	r0, r7, #24
 8000904:	220c      	movs	r2, #12
 8000906:	4619      	mov	r1, r3
 8000908:	f002 fb76 	bl	8002ff8 <memcpy>
	memcpy(latitude, tmp+25, 13);
 800090c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000910:	3319      	adds	r3, #25
 8000912:	f107 0008 	add.w	r0, r7, #8
 8000916:	220d      	movs	r2, #13
 8000918:	4619      	mov	r1, r3
 800091a:	f002 fb6d 	bl	8002ff8 <memcpy>

//	char hour[2], minute[2];
//	memcpy(hour, time, 2);
//	memcpy(minute, time+2, 2);

	sprintf(uartBuffer, "\r\n\r\n time: %s:%s  long: %s  lat: %s \r\n\r\n", hour, minute, longitude, latitude);
 800091e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000922:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	f107 0318 	add.w	r3, r7, #24
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	460b      	mov	r3, r1
 8000934:	490e      	ldr	r1, [pc, #56]	; (8000970 <HAL_UART_RxCpltCallback+0xe4>)
 8000936:	480f      	ldr	r0, [pc, #60]	; (8000974 <HAL_UART_RxCpltCallback+0xe8>)
 8000938:	f002 fb74 	bl	8003024 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <HAL_UART_RxCpltCallback+0xe8>)
 800093e:	f7ff fc67 	bl	8000210 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	f04f 33ff 	mov.w	r3, #4294967295
 800094a:	490a      	ldr	r1, [pc, #40]	; (8000974 <HAL_UART_RxCpltCallback+0xe8>)
 800094c:	480a      	ldr	r0, [pc, #40]	; (8000978 <HAL_UART_RxCpltCallback+0xec>)
 800094e:	f001 fdf2 	bl	8002536 <HAL_UART_Transmit>

	HAL_UART_Receive_DMA(&huart1, rxBuffer, RX_BUFFER_SIZE);
 8000952:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000956:	4905      	ldr	r1, [pc, #20]	; (800096c <HAL_UART_RxCpltCallback+0xe0>)
 8000958:	4808      	ldr	r0, [pc, #32]	; (800097c <HAL_UART_RxCpltCallback+0xf0>)
 800095a:	f001 fe7e 	bl	800265a <HAL_UART_Receive_DMA>
}
 800095e:	bf00      	nop
 8000960:	3768      	adds	r7, #104	; 0x68
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	080038a8 	.word	0x080038a8
 800096c:	20000330 	.word	0x20000330
 8000970:	080038b0 	.word	0x080038b0
 8000974:	20000568 	.word	0x20000568
 8000978:	20000524 	.word	0x20000524
 800097c:	200002ec 	.word	0x200002ec

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x8>
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a0f      	ldr	r2, [pc, #60]	; (80009d8 <HAL_MspInit+0x4c>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ca:	2007      	movs	r0, #7
 80009cc:	f000 fa9c 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08c      	sub	sp, #48	; 0x30
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a49      	ldr	r2, [pc, #292]	; (8000b20 <HAL_UART_MspInit+0x144>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d15b      	bne.n	8000ab6 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
 8000a02:	4b48      	ldr	r3, [pc, #288]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a47      	ldr	r2, [pc, #284]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000a08:	f043 0310 	orr.w	r3, r3, #16
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b45      	ldr	r3, [pc, #276]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f003 0310 	and.w	r3, r3, #16
 8000a16:	61bb      	str	r3, [r7, #24]
 8000a18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	4b41      	ldr	r3, [pc, #260]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a40      	ldr	r2, [pc, #256]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b3e      	ldr	r3, [pc, #248]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a48:	2307      	movs	r3, #7
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4835      	ldr	r0, [pc, #212]	; (8000b28 <HAL_UART_MspInit+0x14c>)
 8000a54:	f000 fe0a 	bl	800166c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000a58:	4b34      	ldr	r3, [pc, #208]	; (8000b2c <HAL_UART_MspInit+0x150>)
 8000a5a:	4a35      	ldr	r2, [pc, #212]	; (8000b30 <HAL_UART_MspInit+0x154>)
 8000a5c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000a5e:	4b33      	ldr	r3, [pc, #204]	; (8000b2c <HAL_UART_MspInit+0x150>)
 8000a60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a64:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a66:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <HAL_UART_MspInit+0x150>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a6c:	4b2f      	ldr	r3, [pc, #188]	; (8000b2c <HAL_UART_MspInit+0x150>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a72:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <HAL_UART_MspInit+0x150>)
 8000a74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a78:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a7a:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <HAL_UART_MspInit+0x150>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a80:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <HAL_UART_MspInit+0x150>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a86:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <HAL_UART_MspInit+0x150>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a8c:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <HAL_UART_MspInit+0x150>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a92:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <HAL_UART_MspInit+0x150>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a98:	4824      	ldr	r0, [pc, #144]	; (8000b2c <HAL_UART_MspInit+0x150>)
 8000a9a:	f000 fa77 	bl	8000f8c <HAL_DMA_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000aa4:	f7ff ff6c 	bl	8000980 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a20      	ldr	r2, [pc, #128]	; (8000b2c <HAL_UART_MspInit+0x150>)
 8000aac:	639a      	str	r2, [r3, #56]	; 0x38
 8000aae:	4a1f      	ldr	r2, [pc, #124]	; (8000b2c <HAL_UART_MspInit+0x150>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ab4:	e030      	b.n	8000b18 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a1e      	ldr	r2, [pc, #120]	; (8000b34 <HAL_UART_MspInit+0x158>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d12b      	bne.n	8000b18 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ace:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6313      	str	r3, [r2, #48]	; 0x30
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000af8:	230c      	movs	r3, #12
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <HAL_UART_MspInit+0x14c>)
 8000b14:	f000 fdaa 	bl	800166c <HAL_GPIO_Init>
}
 8000b18:	bf00      	nop
 8000b1a:	3730      	adds	r7, #48	; 0x30
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40011000 	.word	0x40011000
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	2000028c 	.word	0x2000028c
 8000b30:	40026440 	.word	0x40026440
 8000b34:	40004400 	.word	0x40004400

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b84:	f000 f8d0 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <DMA2_Stream2_IRQHandler+0x10>)
 8000b92:	f000 fb01 	bl	8001198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000028c 	.word	0x2000028c

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd0:	f002 f9e8 	bl	8002fa4 <__errno>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <_sbrk+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20020000 	.word	0x20020000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	2000008c 	.word	0x2000008c
 8000c08:	20000648 	.word	0x20000648

08000c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c36:	490e      	ldr	r1, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c4c:	4c0b      	ldr	r4, [pc, #44]	; (8000c7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c5a:	f7ff ffd7 	bl	8000c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f002 f9a7 	bl	8002fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c62:	f7ff fca9 	bl	80005b8 <main>
  bx  lr    
 8000c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c74:	08003940 	.word	0x08003940
  ldr r2, =_sbss
 8000c78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c7c:	20000644 	.word	0x20000644

08000c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <HAL_Init+0x40>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_Init+0x40>)
 8000c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_Init+0x40>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f92b 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 f808 	bl	8000cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb8:	f7ff fe68 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023c00 	.word	0x40023c00

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x54>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x58>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f943 	bl	8000f72 <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00e      	b.n	8000d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d80a      	bhi.n	8000d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f000 f90b 	bl	8000f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_InitTick+0x5c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e000      	b.n	8000d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20000630 	.word	0x20000630

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000630 	.word	0x20000630

08000d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	db0b      	blt.n	8000df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f003 021f 	and.w	r2, r3, #31
 8000de4:	4907      	ldr	r1, [pc, #28]	; (8000e04 <__NVIC_EnableIRQ+0x38>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	095b      	lsrs	r3, r3, #5
 8000dec:	2001      	movs	r0, #1
 8000dee:	fa00 f202 	lsl.w	r2, r0, r2
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000e100 	.word	0xe000e100

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	; (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	; (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
         );
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	; 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f7ff ff8e 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff29 	bl	8000d68 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f30:	f7ff ff3e 	bl	8000db0 <__NVIC_GetPriorityGrouping>
 8000f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff ff8e 	bl	8000e5c <NVIC_EncodePriority>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff5d 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff31 	bl	8000dcc <__NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffa2 	bl	8000ec4 <SysTick_Config>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff feda 	bl	8000d50 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e099      	b.n	80010dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2202      	movs	r2, #2
 8000fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0201 	bic.w	r2, r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fc8:	e00f      	b.n	8000fea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fca:	f7ff fec1 	bl	8000d50 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b05      	cmp	r3, #5
 8000fd6:	d908      	bls.n	8000fea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2220      	movs	r2, #32
 8000fdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e078      	b.n	80010dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1e8      	bne.n	8000fca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <HAL_DMA_Init+0x158>)
 8001004:	4013      	ands	r3, r2
 8001006:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001016:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001022:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800102e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4313      	orrs	r3, r2
 800103a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	2b04      	cmp	r3, #4
 8001042:	d107      	bne.n	8001054 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	4313      	orrs	r3, r2
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	4313      	orrs	r3, r2
 8001052:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f023 0307 	bic.w	r3, r3, #7
 800106a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	4313      	orrs	r3, r2
 8001074:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	2b04      	cmp	r3, #4
 800107c:	d117      	bne.n	80010ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	4313      	orrs	r3, r2
 8001086:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00e      	beq.n	80010ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 fa6f 	bl	8001574 <DMA_CheckFifoParam>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d008      	beq.n	80010ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2240      	movs	r2, #64	; 0x40
 80010a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80010aa:	2301      	movs	r3, #1
 80010ac:	e016      	b.n	80010dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 fa26 	bl	8001508 <DMA_CalcBaseAndBitshift>
 80010bc:	4603      	mov	r3, r0
 80010be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c4:	223f      	movs	r2, #63	; 0x3f
 80010c6:	409a      	lsls	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	f010803f 	.word	0xf010803f

080010e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001106:	2b01      	cmp	r3, #1
 8001108:	d101      	bne.n	800110e <HAL_DMA_Start_IT+0x26>
 800110a:	2302      	movs	r3, #2
 800110c:	e040      	b.n	8001190 <HAL_DMA_Start_IT+0xa8>
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b01      	cmp	r3, #1
 8001120:	d12f      	bne.n	8001182 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2202      	movs	r2, #2
 8001126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f000 f9b8 	bl	80014ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001140:	223f      	movs	r2, #63	; 0x3f
 8001142:	409a      	lsls	r2, r3
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0216 	orr.w	r2, r2, #22
 8001156:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	2b00      	cmp	r3, #0
 800115e:	d007      	beq.n	8001170 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 0208 	orr.w	r2, r2, #8
 800116e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0201 	orr.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	e005      	b.n	800118e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800118a:	2302      	movs	r3, #2
 800118c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800118e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011a4:	4b92      	ldr	r3, [pc, #584]	; (80013f0 <HAL_DMA_IRQHandler+0x258>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a92      	ldr	r2, [pc, #584]	; (80013f4 <HAL_DMA_IRQHandler+0x25c>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	0a9b      	lsrs	r3, r3, #10
 80011b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c2:	2208      	movs	r2, #8
 80011c4:	409a      	lsls	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d01a      	beq.n	8001204 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d013      	beq.n	8001204 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0204 	bic.w	r2, r2, #4
 80011ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f0:	2208      	movs	r2, #8
 80011f2:	409a      	lsls	r2, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fc:	f043 0201 	orr.w	r2, r3, #1
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001208:	2201      	movs	r2, #1
 800120a:	409a      	lsls	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4013      	ands	r3, r2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d012      	beq.n	800123a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001226:	2201      	movs	r2, #1
 8001228:	409a      	lsls	r2, r3
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001232:	f043 0202 	orr.w	r2, r3, #2
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800123e:	2204      	movs	r2, #4
 8001240:	409a      	lsls	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4013      	ands	r3, r2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d012      	beq.n	8001270 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00b      	beq.n	8001270 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125c:	2204      	movs	r2, #4
 800125e:	409a      	lsls	r2, r3
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001268:	f043 0204 	orr.w	r2, r3, #4
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001274:	2210      	movs	r2, #16
 8001276:	409a      	lsls	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4013      	ands	r3, r2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d043      	beq.n	8001308 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d03c      	beq.n	8001308 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001292:	2210      	movs	r2, #16
 8001294:	409a      	lsls	r2, r3
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d018      	beq.n	80012da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d108      	bne.n	80012c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d024      	beq.n	8001308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	4798      	blx	r3
 80012c6:	e01f      	b.n	8001308 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d01b      	beq.n	8001308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	4798      	blx	r3
 80012d8:	e016      	b.n	8001308 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d107      	bne.n	80012f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0208 	bic.w	r2, r2, #8
 80012f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130c:	2220      	movs	r2, #32
 800130e:	409a      	lsls	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 808e 	beq.w	8001436 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 8086 	beq.w	8001436 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132e:	2220      	movs	r2, #32
 8001330:	409a      	lsls	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b05      	cmp	r3, #5
 8001340:	d136      	bne.n	80013b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0216 	bic.w	r2, r2, #22
 8001350:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	695a      	ldr	r2, [r3, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001360:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	2b00      	cmp	r3, #0
 8001368:	d103      	bne.n	8001372 <HAL_DMA_IRQHandler+0x1da>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0208 	bic.w	r2, r2, #8
 8001380:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001386:	223f      	movs	r2, #63	; 0x3f
 8001388:	409a      	lsls	r2, r3
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d07d      	beq.n	80014a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	4798      	blx	r3
        }
        return;
 80013ae:	e078      	b.n	80014a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d01c      	beq.n	80013f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d108      	bne.n	80013de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d030      	beq.n	8001436 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	4798      	blx	r3
 80013dc:	e02b      	b.n	8001436 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d027      	beq.n	8001436 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	4798      	blx	r3
 80013ee:	e022      	b.n	8001436 <HAL_DMA_IRQHandler+0x29e>
 80013f0:	20000000 	.word	0x20000000
 80013f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10f      	bne.n	8001426 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0210 	bic.w	r2, r2, #16
 8001414:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143a:	2b00      	cmp	r3, #0
 800143c:	d032      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d022      	beq.n	8001490 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2205      	movs	r2, #5
 800144e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0201 	bic.w	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	3301      	adds	r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	429a      	cmp	r2, r3
 800146c:	d307      	bcc.n	800147e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f2      	bne.n	8001462 <HAL_DMA_IRQHandler+0x2ca>
 800147c:	e000      	b.n	8001480 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800147e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	4798      	blx	r3
 80014a0:	e000      	b.n	80014a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80014a2:	bf00      	nop
    }
  }
}
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop

080014ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b40      	cmp	r3, #64	; 0x40
 80014d8:	d108      	bne.n	80014ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014ea:	e007      	b.n	80014fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	60da      	str	r2, [r3, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	3b10      	subs	r3, #16
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <DMA_CalcBaseAndBitshift+0x64>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001522:	4a13      	ldr	r2, [pc, #76]	; (8001570 <DMA_CalcBaseAndBitshift+0x68>)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d909      	bls.n	800154a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800153e:	f023 0303 	bic.w	r3, r3, #3
 8001542:	1d1a      	adds	r2, r3, #4
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	659a      	str	r2, [r3, #88]	; 0x58
 8001548:	e007      	b.n	800155a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001552:	f023 0303 	bic.w	r3, r3, #3
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	aaaaaaab 	.word	0xaaaaaaab
 8001570:	080038f4 	.word	0x080038f4

08001574 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d11f      	bne.n	80015ce <DMA_CheckFifoParam+0x5a>
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	2b03      	cmp	r3, #3
 8001592:	d856      	bhi.n	8001642 <DMA_CheckFifoParam+0xce>
 8001594:	a201      	add	r2, pc, #4	; (adr r2, 800159c <DMA_CheckFifoParam+0x28>)
 8001596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159a:	bf00      	nop
 800159c:	080015ad 	.word	0x080015ad
 80015a0:	080015bf 	.word	0x080015bf
 80015a4:	080015ad 	.word	0x080015ad
 80015a8:	08001643 	.word	0x08001643
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d046      	beq.n	8001646 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015bc:	e043      	b.n	8001646 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015c6:	d140      	bne.n	800164a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015cc:	e03d      	b.n	800164a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015d6:	d121      	bne.n	800161c <DMA_CheckFifoParam+0xa8>
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d837      	bhi.n	800164e <DMA_CheckFifoParam+0xda>
 80015de:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <DMA_CheckFifoParam+0x70>)
 80015e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e4:	080015f5 	.word	0x080015f5
 80015e8:	080015fb 	.word	0x080015fb
 80015ec:	080015f5 	.word	0x080015f5
 80015f0:	0800160d 	.word	0x0800160d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
      break;
 80015f8:	e030      	b.n	800165c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d025      	beq.n	8001652 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800160a:	e022      	b.n	8001652 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001610:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001614:	d11f      	bne.n	8001656 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800161a:	e01c      	b.n	8001656 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d903      	bls.n	800162a <DMA_CheckFifoParam+0xb6>
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2b03      	cmp	r3, #3
 8001626:	d003      	beq.n	8001630 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001628:	e018      	b.n	800165c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
      break;
 800162e:	e015      	b.n	800165c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00e      	beq.n	800165a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
      break;
 8001640:	e00b      	b.n	800165a <DMA_CheckFifoParam+0xe6>
      break;
 8001642:	bf00      	nop
 8001644:	e00a      	b.n	800165c <DMA_CheckFifoParam+0xe8>
      break;
 8001646:	bf00      	nop
 8001648:	e008      	b.n	800165c <DMA_CheckFifoParam+0xe8>
      break;
 800164a:	bf00      	nop
 800164c:	e006      	b.n	800165c <DMA_CheckFifoParam+0xe8>
      break;
 800164e:	bf00      	nop
 8001650:	e004      	b.n	800165c <DMA_CheckFifoParam+0xe8>
      break;
 8001652:	bf00      	nop
 8001654:	e002      	b.n	800165c <DMA_CheckFifoParam+0xe8>
      break;   
 8001656:	bf00      	nop
 8001658:	e000      	b.n	800165c <DMA_CheckFifoParam+0xe8>
      break;
 800165a:	bf00      	nop
    }
  } 
  
  return status; 
 800165c:	7bfb      	ldrb	r3, [r7, #15]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	e165      	b.n	8001954 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001688:	2201      	movs	r2, #1
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f040 8154 	bne.w	800194e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d005      	beq.n	80016be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d130      	bne.n	8001720 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f4:	2201      	movs	r2, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 0201 	and.w	r2, r3, #1
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b03      	cmp	r3, #3
 800172a:	d017      	beq.n	800175c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d123      	bne.n	80017b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	08da      	lsrs	r2, r3, #3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3208      	adds	r2, #8
 8001770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	08da      	lsrs	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3208      	adds	r2, #8
 80017aa:	69b9      	ldr	r1, [r7, #24]
 80017ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0203 	and.w	r2, r3, #3
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80ae 	beq.w	800194e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b5d      	ldr	r3, [pc, #372]	; (800196c <HAL_GPIO_Init+0x300>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	4a5c      	ldr	r2, [pc, #368]	; (800196c <HAL_GPIO_Init+0x300>)
 80017fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001800:	6453      	str	r3, [r2, #68]	; 0x44
 8001802:	4b5a      	ldr	r3, [pc, #360]	; (800196c <HAL_GPIO_Init+0x300>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800180e:	4a58      	ldr	r2, [pc, #352]	; (8001970 <HAL_GPIO_Init+0x304>)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	3302      	adds	r3, #2
 8001816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	220f      	movs	r2, #15
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4f      	ldr	r2, [pc, #316]	; (8001974 <HAL_GPIO_Init+0x308>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d025      	beq.n	8001886 <HAL_GPIO_Init+0x21a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4e      	ldr	r2, [pc, #312]	; (8001978 <HAL_GPIO_Init+0x30c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d01f      	beq.n	8001882 <HAL_GPIO_Init+0x216>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4d      	ldr	r2, [pc, #308]	; (800197c <HAL_GPIO_Init+0x310>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d019      	beq.n	800187e <HAL_GPIO_Init+0x212>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4c      	ldr	r2, [pc, #304]	; (8001980 <HAL_GPIO_Init+0x314>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <HAL_GPIO_Init+0x20e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4b      	ldr	r2, [pc, #300]	; (8001984 <HAL_GPIO_Init+0x318>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d00d      	beq.n	8001876 <HAL_GPIO_Init+0x20a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4a      	ldr	r2, [pc, #296]	; (8001988 <HAL_GPIO_Init+0x31c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d007      	beq.n	8001872 <HAL_GPIO_Init+0x206>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a49      	ldr	r2, [pc, #292]	; (800198c <HAL_GPIO_Init+0x320>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d101      	bne.n	800186e <HAL_GPIO_Init+0x202>
 800186a:	2306      	movs	r3, #6
 800186c:	e00c      	b.n	8001888 <HAL_GPIO_Init+0x21c>
 800186e:	2307      	movs	r3, #7
 8001870:	e00a      	b.n	8001888 <HAL_GPIO_Init+0x21c>
 8001872:	2305      	movs	r3, #5
 8001874:	e008      	b.n	8001888 <HAL_GPIO_Init+0x21c>
 8001876:	2304      	movs	r3, #4
 8001878:	e006      	b.n	8001888 <HAL_GPIO_Init+0x21c>
 800187a:	2303      	movs	r3, #3
 800187c:	e004      	b.n	8001888 <HAL_GPIO_Init+0x21c>
 800187e:	2302      	movs	r3, #2
 8001880:	e002      	b.n	8001888 <HAL_GPIO_Init+0x21c>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <HAL_GPIO_Init+0x21c>
 8001886:	2300      	movs	r3, #0
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	f002 0203 	and.w	r2, r2, #3
 800188e:	0092      	lsls	r2, r2, #2
 8001890:	4093      	lsls	r3, r2
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001898:	4935      	ldr	r1, [pc, #212]	; (8001970 <HAL_GPIO_Init+0x304>)
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	3302      	adds	r3, #2
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a6:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <HAL_GPIO_Init+0x324>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018ca:	4a31      	ldr	r2, [pc, #196]	; (8001990 <HAL_GPIO_Init+0x324>)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_GPIO_Init+0x324>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018f4:	4a26      	ldr	r2, [pc, #152]	; (8001990 <HAL_GPIO_Init+0x324>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018fa:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_GPIO_Init+0x324>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800191e:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <HAL_GPIO_Init+0x324>)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_GPIO_Init+0x324>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001948:	4a11      	ldr	r2, [pc, #68]	; (8001990 <HAL_GPIO_Init+0x324>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3301      	adds	r3, #1
 8001952:	61fb      	str	r3, [r7, #28]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	2b0f      	cmp	r3, #15
 8001958:	f67f ae96 	bls.w	8001688 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3724      	adds	r7, #36	; 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40013800 	.word	0x40013800
 8001974:	40020000 	.word	0x40020000
 8001978:	40020400 	.word	0x40020400
 800197c:	40020800 	.word	0x40020800
 8001980:	40020c00 	.word	0x40020c00
 8001984:	40021000 	.word	0x40021000
 8001988:	40021400 	.word	0x40021400
 800198c:	40021800 	.word	0x40021800
 8001990:	40013c00 	.word	0x40013c00

08001994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
 80019a0:	4613      	mov	r3, r2
 80019a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a4:	787b      	ldrb	r3, [r7, #1]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019b0:	e003      	b.n	80019ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019b2:	887b      	ldrh	r3, [r7, #2]
 80019b4:	041a      	lsls	r2, r3, #16
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	619a      	str	r2, [r3, #24]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0cc      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b68      	ldr	r3, [pc, #416]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d90c      	bls.n	8001a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b65      	ldr	r3, [pc, #404]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b63      	ldr	r3, [pc, #396]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0b8      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a1c:	4b59      	ldr	r3, [pc, #356]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4a58      	ldr	r2, [pc, #352]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a34:	4b53      	ldr	r3, [pc, #332]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a40:	4b50      	ldr	r3, [pc, #320]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	494d      	ldr	r1, [pc, #308]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d044      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d119      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e07f      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d003      	beq.n	8001a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a86:	4b3f      	ldr	r3, [pc, #252]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e06f      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a96:	4b3b      	ldr	r3, [pc, #236]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e067      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa6:	4b37      	ldr	r3, [pc, #220]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f023 0203 	bic.w	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4934      	ldr	r1, [pc, #208]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab8:	f7ff f94a 	bl	8000d50 <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	e00a      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac0:	f7ff f946 	bl	8000d50 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e04f      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 020c 	and.w	r2, r3, #12
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d1eb      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae8:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d20c      	bcs.n	8001b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e032      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4916      	ldr	r1, [pc, #88]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	490e      	ldr	r1, [pc, #56]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b4e:	f000 f855 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 8001b52:	4602      	mov	r2, r0
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	490a      	ldr	r1, [pc, #40]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001b60:	5ccb      	ldrb	r3, [r1, r3]
 8001b62:	fa22 f303 	lsr.w	r3, r2, r3
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_ClockConfig+0x1c8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff f8aa 	bl	8000cc8 <HAL_InitTick>

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023c00 	.word	0x40023c00
 8001b84:	40023800 	.word	0x40023800
 8001b88:	080038dc 	.word	0x080038dc
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000004 	.word	0x20000004

08001b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000000 	.word	0x20000000

08001bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bb0:	f7ff fff0 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	0a9b      	lsrs	r3, r3, #10
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	4903      	ldr	r1, [pc, #12]	; (8001bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc2:	5ccb      	ldrb	r3, [r1, r3]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	080038ec 	.word	0x080038ec

08001bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bd8:	f7ff ffdc 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	0b5b      	lsrs	r3, r3, #13
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	4903      	ldr	r1, [pc, #12]	; (8001bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	080038ec 	.word	0x080038ec

08001bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c00:	b088      	sub	sp, #32
 8001c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c18:	4bce      	ldr	r3, [pc, #824]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	2b0c      	cmp	r3, #12
 8001c22:	f200 818d 	bhi.w	8001f40 <HAL_RCC_GetSysClockFreq+0x344>
 8001c26:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <HAL_RCC_GetSysClockFreq+0x30>)
 8001c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2c:	08001c61 	.word	0x08001c61
 8001c30:	08001f41 	.word	0x08001f41
 8001c34:	08001f41 	.word	0x08001f41
 8001c38:	08001f41 	.word	0x08001f41
 8001c3c:	08001c67 	.word	0x08001c67
 8001c40:	08001f41 	.word	0x08001f41
 8001c44:	08001f41 	.word	0x08001f41
 8001c48:	08001f41 	.word	0x08001f41
 8001c4c:	08001c6d 	.word	0x08001c6d
 8001c50:	08001f41 	.word	0x08001f41
 8001c54:	08001f41 	.word	0x08001f41
 8001c58:	08001f41 	.word	0x08001f41
 8001c5c:	08001de1 	.word	0x08001de1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c60:	4bbd      	ldr	r3, [pc, #756]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001c62:	61bb      	str	r3, [r7, #24]
       break;
 8001c64:	e16f      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c66:	4bbd      	ldr	r3, [pc, #756]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x360>)
 8001c68:	61bb      	str	r3, [r7, #24]
      break;
 8001c6a:	e16c      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c6c:	4bb9      	ldr	r3, [pc, #740]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c74:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c76:	4bb7      	ldr	r3, [pc, #732]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d053      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c82:	4bb4      	ldr	r3, [pc, #720]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	099b      	lsrs	r3, r3, #6
 8001c88:	461a      	mov	r2, r3
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c92:	f04f 0100 	mov.w	r1, #0
 8001c96:	ea02 0400 	and.w	r4, r2, r0
 8001c9a:	603c      	str	r4, [r7, #0]
 8001c9c:	400b      	ands	r3, r1
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	014b      	lsls	r3, r1, #5
 8001cb2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cb6:	0142      	lsls	r2, r0, #5
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4623      	mov	r3, r4
 8001cbe:	1ac0      	subs	r0, r0, r3
 8001cc0:	462b      	mov	r3, r5
 8001cc2:	eb61 0103 	sbc.w	r1, r1, r3
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	018b      	lsls	r3, r1, #6
 8001cd0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cd4:	0182      	lsls	r2, r0, #6
 8001cd6:	1a12      	subs	r2, r2, r0
 8001cd8:	eb63 0301 	sbc.w	r3, r3, r1
 8001cdc:	f04f 0000 	mov.w	r0, #0
 8001ce0:	f04f 0100 	mov.w	r1, #0
 8001ce4:	00d9      	lsls	r1, r3, #3
 8001ce6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cea:	00d0      	lsls	r0, r2, #3
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	1852      	adds	r2, r2, r1
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	eb43 0101 	adc.w	r1, r3, r1
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	f04f 0000 	mov.w	r0, #0
 8001d00:	f04f 0100 	mov.w	r1, #0
 8001d04:	0259      	lsls	r1, r3, #9
 8001d06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d0a:	0250      	lsls	r0, r2, #9
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	461a      	mov	r2, r3
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	f7fe fad0 	bl	80002c0 <__aeabi_uldivmod>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4613      	mov	r3, r2
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	e04c      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d2a:	4b8a      	ldr	r3, [pc, #552]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	099b      	lsrs	r3, r3, #6
 8001d30:	461a      	mov	r2, r3
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d3a:	f04f 0100 	mov.w	r1, #0
 8001d3e:	ea02 0a00 	and.w	sl, r2, r0
 8001d42:	ea03 0b01 	and.w	fp, r3, r1
 8001d46:	4650      	mov	r0, sl
 8001d48:	4659      	mov	r1, fp
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	014b      	lsls	r3, r1, #5
 8001d54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d58:	0142      	lsls	r2, r0, #5
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	ebb0 000a 	subs.w	r0, r0, sl
 8001d62:	eb61 010b 	sbc.w	r1, r1, fp
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	018b      	lsls	r3, r1, #6
 8001d70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d74:	0182      	lsls	r2, r0, #6
 8001d76:	1a12      	subs	r2, r2, r0
 8001d78:	eb63 0301 	sbc.w	r3, r3, r1
 8001d7c:	f04f 0000 	mov.w	r0, #0
 8001d80:	f04f 0100 	mov.w	r1, #0
 8001d84:	00d9      	lsls	r1, r3, #3
 8001d86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d8a:	00d0      	lsls	r0, r2, #3
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	eb12 020a 	adds.w	r2, r2, sl
 8001d94:	eb43 030b 	adc.w	r3, r3, fp
 8001d98:	f04f 0000 	mov.w	r0, #0
 8001d9c:	f04f 0100 	mov.w	r1, #0
 8001da0:	0299      	lsls	r1, r3, #10
 8001da2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001da6:	0290      	lsls	r0, r2, #10
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	461a      	mov	r2, r3
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	f7fe fa82 	bl	80002c0 <__aeabi_uldivmod>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dc4:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	0c1b      	lsrs	r3, r3, #16
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	61bb      	str	r3, [r7, #24]
      break;
 8001dde:	e0b2      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001de0:	4b5c      	ldr	r3, [pc, #368]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001de8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dea:	4b5a      	ldr	r3, [pc, #360]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d04d      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df6:	4b57      	ldr	r3, [pc, #348]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	099b      	lsrs	r3, r3, #6
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e06:	f04f 0100 	mov.w	r1, #0
 8001e0a:	ea02 0800 	and.w	r8, r2, r0
 8001e0e:	ea03 0901 	and.w	r9, r3, r1
 8001e12:	4640      	mov	r0, r8
 8001e14:	4649      	mov	r1, r9
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	014b      	lsls	r3, r1, #5
 8001e20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e24:	0142      	lsls	r2, r0, #5
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	ebb0 0008 	subs.w	r0, r0, r8
 8001e2e:	eb61 0109 	sbc.w	r1, r1, r9
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	018b      	lsls	r3, r1, #6
 8001e3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e40:	0182      	lsls	r2, r0, #6
 8001e42:	1a12      	subs	r2, r2, r0
 8001e44:	eb63 0301 	sbc.w	r3, r3, r1
 8001e48:	f04f 0000 	mov.w	r0, #0
 8001e4c:	f04f 0100 	mov.w	r1, #0
 8001e50:	00d9      	lsls	r1, r3, #3
 8001e52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e56:	00d0      	lsls	r0, r2, #3
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	eb12 0208 	adds.w	r2, r2, r8
 8001e60:	eb43 0309 	adc.w	r3, r3, r9
 8001e64:	f04f 0000 	mov.w	r0, #0
 8001e68:	f04f 0100 	mov.w	r1, #0
 8001e6c:	0259      	lsls	r1, r3, #9
 8001e6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e72:	0250      	lsls	r0, r2, #9
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	f7fe fa1c 	bl	80002c0 <__aeabi_uldivmod>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	e04a      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e92:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	099b      	lsrs	r3, r3, #6
 8001e98:	461a      	mov	r2, r3
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ea2:	f04f 0100 	mov.w	r1, #0
 8001ea6:	ea02 0400 	and.w	r4, r2, r0
 8001eaa:	ea03 0501 	and.w	r5, r3, r1
 8001eae:	4620      	mov	r0, r4
 8001eb0:	4629      	mov	r1, r5
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	014b      	lsls	r3, r1, #5
 8001ebc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ec0:	0142      	lsls	r2, r0, #5
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	1b00      	subs	r0, r0, r4
 8001ec8:	eb61 0105 	sbc.w	r1, r1, r5
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	018b      	lsls	r3, r1, #6
 8001ed6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001eda:	0182      	lsls	r2, r0, #6
 8001edc:	1a12      	subs	r2, r2, r0
 8001ede:	eb63 0301 	sbc.w	r3, r3, r1
 8001ee2:	f04f 0000 	mov.w	r0, #0
 8001ee6:	f04f 0100 	mov.w	r1, #0
 8001eea:	00d9      	lsls	r1, r3, #3
 8001eec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ef0:	00d0      	lsls	r0, r2, #3
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	1912      	adds	r2, r2, r4
 8001ef8:	eb45 0303 	adc.w	r3, r5, r3
 8001efc:	f04f 0000 	mov.w	r0, #0
 8001f00:	f04f 0100 	mov.w	r1, #0
 8001f04:	0299      	lsls	r1, r3, #10
 8001f06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f0a:	0290      	lsls	r0, r2, #10
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	461a      	mov	r2, r3
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	f7fe f9d0 	bl	80002c0 <__aeabi_uldivmod>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4613      	mov	r3, r2
 8001f26:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	0f1b      	lsrs	r3, r3, #28
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	61bb      	str	r3, [r7, #24]
      break;
 8001f3e:	e002      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f42:	61bb      	str	r3, [r7, #24]
      break;
 8001f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f46:	69bb      	ldr	r3, [r7, #24]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3720      	adds	r7, #32
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	00f42400 	.word	0x00f42400
 8001f5c:	007a1200 	.word	0x007a1200

08001f60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e28d      	b.n	800248e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8083 	beq.w	8002086 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f80:	4b94      	ldr	r3, [pc, #592]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d019      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f8c:	4b91      	ldr	r3, [pc, #580]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f98:	4b8e      	ldr	r3, [pc, #568]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa4:	d00c      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa6:	4b8b      	ldr	r3, [pc, #556]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fae:	2b0c      	cmp	r3, #12
 8001fb0:	d112      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fb2:	4b88      	ldr	r3, [pc, #544]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fbe:	d10b      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc0:	4b84      	ldr	r3, [pc, #528]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d05b      	beq.n	8002084 <HAL_RCC_OscConfig+0x124>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d157      	bne.n	8002084 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e25a      	b.n	800248e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe0:	d106      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x90>
 8001fe2:	4b7c      	ldr	r3, [pc, #496]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a7b      	ldr	r2, [pc, #492]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8001fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	e01d      	b.n	800202c <HAL_RCC_OscConfig+0xcc>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0xb4>
 8001ffa:	4b76      	ldr	r3, [pc, #472]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a75      	ldr	r2, [pc, #468]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8002000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	4b73      	ldr	r3, [pc, #460]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a72      	ldr	r2, [pc, #456]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e00b      	b.n	800202c <HAL_RCC_OscConfig+0xcc>
 8002014:	4b6f      	ldr	r3, [pc, #444]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a6e      	ldr	r2, [pc, #440]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 800201a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b6c      	ldr	r3, [pc, #432]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a6b      	ldr	r2, [pc, #428]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8002026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d013      	beq.n	800205c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7fe fe8c 	bl	8000d50 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203c:	f7fe fe88 	bl	8000d50 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e21f      	b.n	800248e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0xdc>
 800205a:	e014      	b.n	8002086 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7fe fe78 	bl	8000d50 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002064:	f7fe fe74 	bl	8000d50 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e20b      	b.n	800248e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002076:	4b57      	ldr	r3, [pc, #348]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x104>
 8002082:	e000      	b.n	8002086 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d06f      	beq.n	8002172 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002092:	4b50      	ldr	r3, [pc, #320]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b00      	cmp	r3, #0
 800209c:	d017      	beq.n	80020ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800209e:	4b4d      	ldr	r3, [pc, #308]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d105      	bne.n	80020b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020aa:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b6:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	d11c      	bne.n	80020fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c2:	4b44      	ldr	r3, [pc, #272]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d116      	bne.n	80020fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ce:	4b41      	ldr	r3, [pc, #260]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_RCC_OscConfig+0x186>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e1d3      	b.n	800248e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4937      	ldr	r1, [pc, #220]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fa:	e03a      	b.n	8002172 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d020      	beq.n	8002146 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002104:	4b34      	ldr	r3, [pc, #208]	; (80021d8 <HAL_RCC_OscConfig+0x278>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210a:	f7fe fe21 	bl	8000d50 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002112:	f7fe fe1d 	bl	8000d50 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e1b4      	b.n	800248e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002124:	4b2b      	ldr	r3, [pc, #172]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002130:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4925      	ldr	r1, [pc, #148]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
 8002144:	e015      	b.n	8002172 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_RCC_OscConfig+0x278>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7fe fe00 	bl	8000d50 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002154:	f7fe fdfc 	bl	8000d50 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e193      	b.n	800248e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d036      	beq.n	80021ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d016      	beq.n	80021b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_RCC_OscConfig+0x27c>)
 8002188:	2201      	movs	r2, #1
 800218a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7fe fde0 	bl	8000d50 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002194:	f7fe fddc 	bl	8000d50 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e173      	b.n	800248e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 80021a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x234>
 80021b2:	e01b      	b.n	80021ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_RCC_OscConfig+0x27c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ba:	f7fe fdc9 	bl	8000d50 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c0:	e00e      	b.n	80021e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c2:	f7fe fdc5 	bl	8000d50 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d907      	bls.n	80021e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e15c      	b.n	800248e <HAL_RCC_OscConfig+0x52e>
 80021d4:	40023800 	.word	0x40023800
 80021d8:	42470000 	.word	0x42470000
 80021dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e0:	4b8a      	ldr	r3, [pc, #552]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 80021e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1ea      	bne.n	80021c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8097 	beq.w	8002328 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fe:	4b83      	ldr	r3, [pc, #524]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10f      	bne.n	800222a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	4b7f      	ldr	r3, [pc, #508]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a7e      	ldr	r2, [pc, #504]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	4b7c      	ldr	r3, [pc, #496]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002226:	2301      	movs	r3, #1
 8002228:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b79      	ldr	r3, [pc, #484]	; (8002410 <HAL_RCC_OscConfig+0x4b0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d118      	bne.n	8002268 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002236:	4b76      	ldr	r3, [pc, #472]	; (8002410 <HAL_RCC_OscConfig+0x4b0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a75      	ldr	r2, [pc, #468]	; (8002410 <HAL_RCC_OscConfig+0x4b0>)
 800223c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002242:	f7fe fd85 	bl	8000d50 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224a:	f7fe fd81 	bl	8000d50 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e118      	b.n	800248e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	4b6c      	ldr	r3, [pc, #432]	; (8002410 <HAL_RCC_OscConfig+0x4b0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0x31e>
 8002270:	4b66      	ldr	r3, [pc, #408]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 8002272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002274:	4a65      	ldr	r2, [pc, #404]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6713      	str	r3, [r2, #112]	; 0x70
 800227c:	e01c      	b.n	80022b8 <HAL_RCC_OscConfig+0x358>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b05      	cmp	r3, #5
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x340>
 8002286:	4b61      	ldr	r3, [pc, #388]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	4a60      	ldr	r2, [pc, #384]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 800228c:	f043 0304 	orr.w	r3, r3, #4
 8002290:	6713      	str	r3, [r2, #112]	; 0x70
 8002292:	4b5e      	ldr	r3, [pc, #376]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 8002294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002296:	4a5d      	ldr	r2, [pc, #372]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6713      	str	r3, [r2, #112]	; 0x70
 800229e:	e00b      	b.n	80022b8 <HAL_RCC_OscConfig+0x358>
 80022a0:	4b5a      	ldr	r3, [pc, #360]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 80022a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a4:	4a59      	ldr	r2, [pc, #356]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 80022a6:	f023 0301 	bic.w	r3, r3, #1
 80022aa:	6713      	str	r3, [r2, #112]	; 0x70
 80022ac:	4b57      	ldr	r3, [pc, #348]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 80022ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b0:	4a56      	ldr	r2, [pc, #344]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 80022b2:	f023 0304 	bic.w	r3, r3, #4
 80022b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d015      	beq.n	80022ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c0:	f7fe fd46 	bl	8000d50 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c6:	e00a      	b.n	80022de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c8:	f7fe fd42 	bl	8000d50 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e0d7      	b.n	800248e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022de:	4b4b      	ldr	r3, [pc, #300]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0ee      	beq.n	80022c8 <HAL_RCC_OscConfig+0x368>
 80022ea:	e014      	b.n	8002316 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ec:	f7fe fd30 	bl	8000d50 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f2:	e00a      	b.n	800230a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f4:	f7fe fd2c 	bl	8000d50 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002302:	4293      	cmp	r3, r2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e0c1      	b.n	800248e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230a:	4b40      	ldr	r3, [pc, #256]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ee      	bne.n	80022f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002316:	7dfb      	ldrb	r3, [r7, #23]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d105      	bne.n	8002328 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231c:	4b3b      	ldr	r3, [pc, #236]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	4a3a      	ldr	r2, [pc, #232]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 8002322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002326:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80ad 	beq.w	800248c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002332:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b08      	cmp	r3, #8
 800233c:	d060      	beq.n	8002400 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d145      	bne.n	80023d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002346:	4b33      	ldr	r3, [pc, #204]	; (8002414 <HAL_RCC_OscConfig+0x4b4>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7fe fd00 	bl	8000d50 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002354:	f7fe fcfc 	bl	8000d50 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e093      	b.n	800248e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002366:	4b29      	ldr	r3, [pc, #164]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	019b      	lsls	r3, r3, #6
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	085b      	lsrs	r3, r3, #1
 800238a:	3b01      	subs	r3, #1
 800238c:	041b      	lsls	r3, r3, #16
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	061b      	lsls	r3, r3, #24
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	071b      	lsls	r3, r3, #28
 800239e:	491b      	ldr	r1, [pc, #108]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a4:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_RCC_OscConfig+0x4b4>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7fe fcd1 	bl	8000d50 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b2:	f7fe fccd 	bl	8000d50 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e064      	b.n	800248e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x452>
 80023d0:	e05c      	b.n	800248c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_RCC_OscConfig+0x4b4>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7fe fcba 	bl	8000d50 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e0:	f7fe fcb6 	bl	8000d50 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e04d      	b.n	800248e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_RCC_OscConfig+0x4ac>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x480>
 80023fe:	e045      	b.n	800248c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d107      	bne.n	8002418 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e040      	b.n	800248e <HAL_RCC_OscConfig+0x52e>
 800240c:	40023800 	.word	0x40023800
 8002410:	40007000 	.word	0x40007000
 8002414:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002418:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <HAL_RCC_OscConfig+0x538>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d030      	beq.n	8002488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d129      	bne.n	8002488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d122      	bne.n	8002488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002448:	4013      	ands	r3, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800244e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002450:	4293      	cmp	r3, r2
 8002452:	d119      	bne.n	8002488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	3b01      	subs	r3, #1
 8002462:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002464:	429a      	cmp	r2, r3
 8002466:	d10f      	bne.n	8002488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002474:	429a      	cmp	r2, r3
 8002476:	d107      	bne.n	8002488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800

0800249c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e03f      	b.n	800252e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe fa8a 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2224      	movs	r2, #36	; 0x24
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fb97 	bl	8002c14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002504:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002514:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b08a      	sub	sp, #40	; 0x28
 800253a:	af02      	add	r7, sp, #8
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	4613      	mov	r3, r2
 8002544:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b20      	cmp	r3, #32
 8002554:	d17c      	bne.n	8002650 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <HAL_UART_Transmit+0x2c>
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e075      	b.n	8002652 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_UART_Transmit+0x3e>
 8002570:	2302      	movs	r3, #2
 8002572:	e06e      	b.n	8002652 <HAL_UART_Transmit+0x11c>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2221      	movs	r2, #33	; 0x21
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800258a:	f7fe fbe1 	bl	8000d50 <HAL_GetTick>
 800258e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	88fa      	ldrh	r2, [r7, #6]
 8002594:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	88fa      	ldrh	r2, [r7, #6]
 800259a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a4:	d108      	bne.n	80025b8 <HAL_UART_Transmit+0x82>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d104      	bne.n	80025b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	e003      	b.n	80025c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025c8:	e02a      	b.n	8002620 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2200      	movs	r2, #0
 80025d2:	2180      	movs	r1, #128	; 0x80
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 f988 	bl	80028ea <UART_WaitOnFlagUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e036      	b.n	8002652 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10b      	bne.n	8002602 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	3302      	adds	r3, #2
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	e007      	b.n	8002612 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	781a      	ldrb	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	3301      	adds	r3, #1
 8002610:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1cf      	bne.n	80025ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2200      	movs	r2, #0
 8002632:	2140      	movs	r1, #64	; 0x40
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f958 	bl	80028ea <UART_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e006      	b.n	8002652 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	e000      	b.n	8002652 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002650:	2302      	movs	r3, #2
  }
}
 8002652:	4618      	mov	r0, r3
 8002654:	3720      	adds	r7, #32
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	4613      	mov	r3, r2
 8002666:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b20      	cmp	r3, #32
 8002672:	d11d      	bne.n	80026b0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_UART_Receive_DMA+0x26>
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e016      	b.n	80026b2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_UART_Receive_DMA+0x38>
 800268e:	2302      	movs	r3, #2
 8002690:	e00f      	b.n	80026b2 <HAL_UART_Receive_DMA+0x58>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f98e 	bl	80029c8 <UART_Start_Receive_DMA>
 80026ac:	4603      	mov	r3, r0
 80026ae:	e000      	b.n	80026b2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80026b0:	2302      	movs	r3, #2
  }
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b09c      	sub	sp, #112	; 0x70
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d172      	bne.n	80027fc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002718:	2200      	movs	r2, #0
 800271a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800271c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	330c      	adds	r3, #12
 8002722:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002726:	e853 3f00 	ldrex	r3, [r3]
 800272a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800272c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800272e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002732:	66bb      	str	r3, [r7, #104]	; 0x68
 8002734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	330c      	adds	r3, #12
 800273a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800273c:	65ba      	str	r2, [r7, #88]	; 0x58
 800273e:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002740:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002742:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002744:	e841 2300 	strex	r3, r2, [r1]
 8002748:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800274a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1e5      	bne.n	800271c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3314      	adds	r3, #20
 8002756:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275a:	e853 3f00 	ldrex	r3, [r3]
 800275e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	667b      	str	r3, [r7, #100]	; 0x64
 8002768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	3314      	adds	r3, #20
 800276e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002770:	647a      	str	r2, [r7, #68]	; 0x44
 8002772:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002774:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002776:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002778:	e841 2300 	strex	r3, r2, [r1]
 800277c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800277e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1e5      	bne.n	8002750 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3314      	adds	r3, #20
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	e853 3f00 	ldrex	r3, [r3]
 8002792:	623b      	str	r3, [r7, #32]
   return(result);
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800279a:	663b      	str	r3, [r7, #96]	; 0x60
 800279c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3314      	adds	r3, #20
 80027a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027a4:	633a      	str	r2, [r7, #48]	; 0x30
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ac:	e841 2300 	strex	r3, r2, [r1]
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e5      	bne.n	8002784 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d119      	bne.n	80027fc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	330c      	adds	r3, #12
 80027ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	e853 3f00 	ldrex	r3, [r3]
 80027d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f023 0310 	bic.w	r3, r3, #16
 80027de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	330c      	adds	r3, #12
 80027e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80027e8:	61fa      	str	r2, [r7, #28]
 80027ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ec:	69b9      	ldr	r1, [r7, #24]
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	e841 2300 	strex	r3, r2, [r1]
 80027f4:	617b      	str	r3, [r7, #20]
   return(result);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e5      	bne.n	80027c8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	2b01      	cmp	r3, #1
 8002802:	d106      	bne.n	8002812 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002806:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002808:	4619      	mov	r1, r3
 800280a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800280c:	f7ff ff69 	bl	80026e2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002810:	e002      	b.n	8002818 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002812:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002814:	f7fe f83a 	bl	800088c <HAL_UART_RxCpltCallback>
}
 8002818:	bf00      	nop
 800281a:	3770      	adds	r7, #112	; 0x70
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	2b01      	cmp	r3, #1
 8002834:	d108      	bne.n	8002848 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	b29b      	uxth	r3, r3
 800283e:	4619      	mov	r1, r3
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f7ff ff4e 	bl	80026e2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002846:	e002      	b.n	800284e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f7ff ff36 	bl	80026ba <HAL_UART_RxHalfCpltCallback>
}
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002872:	2b80      	cmp	r3, #128	; 0x80
 8002874:	bf0c      	ite	eq
 8002876:	2301      	moveq	r3, #1
 8002878:	2300      	movne	r3, #0
 800287a:	b2db      	uxtb	r3, r3
 800287c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b21      	cmp	r3, #33	; 0x21
 8002888:	d108      	bne.n	800289c <UART_DMAError+0x46>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2200      	movs	r2, #0
 8002894:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002896:	68b8      	ldr	r0, [r7, #8]
 8002898:	f000 f930 	bl	8002afc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a6:	2b40      	cmp	r3, #64	; 0x40
 80028a8:	bf0c      	ite	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	2300      	movne	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b22      	cmp	r3, #34	; 0x22
 80028bc:	d108      	bne.n	80028d0 <UART_DMAError+0x7a>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2200      	movs	r2, #0
 80028c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80028ca:	68b8      	ldr	r0, [r7, #8]
 80028cc:	f000 f93e 	bl	8002b4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	f043 0210 	orr.w	r2, r3, #16
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028dc:	68b8      	ldr	r0, [r7, #8]
 80028de:	f7ff fef6 	bl	80026ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b090      	sub	sp, #64	; 0x40
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	4613      	mov	r3, r2
 80028f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028fa:	e050      	b.n	800299e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002902:	d04c      	beq.n	800299e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002906:	2b00      	cmp	r3, #0
 8002908:	d007      	beq.n	800291a <UART_WaitOnFlagUntilTimeout+0x30>
 800290a:	f7fe fa21 	bl	8000d50 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002916:	429a      	cmp	r2, r3
 8002918:	d241      	bcs.n	800299e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	e853 3f00 	ldrex	r3, [r3]
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	330c      	adds	r3, #12
 8002938:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800293a:	637a      	str	r2, [r7, #52]	; 0x34
 800293c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002942:	e841 2300 	strex	r3, r2, [r1]
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1e5      	bne.n	800291a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3314      	adds	r3, #20
 8002954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	e853 3f00 	ldrex	r3, [r3]
 800295c:	613b      	str	r3, [r7, #16]
   return(result);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	63bb      	str	r3, [r7, #56]	; 0x38
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3314      	adds	r3, #20
 800296c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800296e:	623a      	str	r2, [r7, #32]
 8002970:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002972:	69f9      	ldr	r1, [r7, #28]
 8002974:	6a3a      	ldr	r2, [r7, #32]
 8002976:	e841 2300 	strex	r3, r2, [r1]
 800297a:	61bb      	str	r3, [r7, #24]
   return(result);
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1e5      	bne.n	800294e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e00f      	b.n	80029be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4013      	ands	r3, r2
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	bf0c      	ite	eq
 80029ae:	2301      	moveq	r3, #1
 80029b0:	2300      	movne	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d09f      	beq.n	80028fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3740      	adds	r7, #64	; 0x40
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b098      	sub	sp, #96	; 0x60
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	4613      	mov	r3, r2
 80029d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	88fa      	ldrh	r2, [r7, #6]
 80029e0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2222      	movs	r2, #34	; 0x22
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	4a3e      	ldr	r2, [pc, #248]	; (8002af0 <UART_Start_Receive_DMA+0x128>)
 80029f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	4a3d      	ldr	r2, [pc, #244]	; (8002af4 <UART_Start_Receive_DMA+0x12c>)
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	4a3c      	ldr	r2, [pc, #240]	; (8002af8 <UART_Start_Receive_DMA+0x130>)
 8002a06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002a10:	f107 0308 	add.w	r3, r7, #8
 8002a14:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	4619      	mov	r1, r3
 8002a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	f7fe fb5e 	bl	80010e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	330c      	adds	r3, #12
 8002a50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a54:	e853 3f00 	ldrex	r3, [r3]
 8002a58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a60:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	330c      	adds	r3, #12
 8002a68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a6a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002a6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a6e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002a70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a72:	e841 2300 	strex	r3, r2, [r1]
 8002a76:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1e5      	bne.n	8002a4a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3314      	adds	r3, #20
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	e853 3f00 	ldrex	r3, [r3]
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	657b      	str	r3, [r7, #84]	; 0x54
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3314      	adds	r3, #20
 8002a9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a9e:	63ba      	str	r2, [r7, #56]	; 0x38
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002aa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aa6:	e841 2300 	strex	r3, r2, [r1]
 8002aaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1e5      	bne.n	8002a7e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3314      	adds	r3, #20
 8002ab8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	e853 3f00 	ldrex	r3, [r3]
 8002ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ac8:	653b      	str	r3, [r7, #80]	; 0x50
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3314      	adds	r3, #20
 8002ad0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ad2:	627a      	str	r2, [r7, #36]	; 0x24
 8002ad4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad6:	6a39      	ldr	r1, [r7, #32]
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ada:	e841 2300 	strex	r3, r2, [r1]
 8002ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1e5      	bne.n	8002ab2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3760      	adds	r7, #96	; 0x60
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	080026fb 	.word	0x080026fb
 8002af4:	08002821 	.word	0x08002821
 8002af8:	08002857 	.word	0x08002857

08002afc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	330c      	adds	r3, #12
 8002b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	e853 3f00 	ldrex	r3, [r3]
 8002b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002b1a:	61fb      	str	r3, [r7, #28]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	330c      	adds	r3, #12
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	61ba      	str	r2, [r7, #24]
 8002b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b28:	6979      	ldr	r1, [r7, #20]
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	e841 2300 	strex	r3, r2, [r1]
 8002b30:	613b      	str	r3, [r7, #16]
   return(result);
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e5      	bne.n	8002b04 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002b40:	bf00      	nop
 8002b42:	3724      	adds	r7, #36	; 0x24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b095      	sub	sp, #84	; 0x54
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	330c      	adds	r3, #12
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5e:	e853 3f00 	ldrex	r3, [r3]
 8002b62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	330c      	adds	r3, #12
 8002b72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b74:	643a      	str	r2, [r7, #64]	; 0x40
 8002b76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b7c:	e841 2300 	strex	r3, r2, [r1]
 8002b80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1e5      	bne.n	8002b54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	3314      	adds	r3, #20
 8002b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	e853 3f00 	ldrex	r3, [r3]
 8002b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3314      	adds	r3, #20
 8002ba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ba8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bb0:	e841 2300 	strex	r3, r2, [r1]
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1e5      	bne.n	8002b88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d119      	bne.n	8002bf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	330c      	adds	r3, #12
 8002bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	e853 3f00 	ldrex	r3, [r3]
 8002bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f023 0310 	bic.w	r3, r3, #16
 8002bda:	647b      	str	r3, [r7, #68]	; 0x44
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	330c      	adds	r3, #12
 8002be2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002be4:	61ba      	str	r2, [r7, #24]
 8002be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be8:	6979      	ldr	r1, [r7, #20]
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	e841 2300 	strex	r3, r2, [r1]
 8002bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1e5      	bne.n	8002bc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c06:	bf00      	nop
 8002c08:	3754      	adds	r7, #84	; 0x54
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c18:	b09f      	sub	sp, #124	; 0x7c
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2a:	68d9      	ldr	r1, [r3, #12]
 8002c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	ea40 0301 	orr.w	r3, r0, r1
 8002c34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c58:	f021 010c 	bic.w	r1, r1, #12
 8002c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c62:	430b      	orrs	r3, r1
 8002c64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c72:	6999      	ldr	r1, [r3, #24]
 8002c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	ea40 0301 	orr.w	r3, r0, r1
 8002c7c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4bc5      	ldr	r3, [pc, #788]	; (8002f98 <UART_SetConfig+0x384>)
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d004      	beq.n	8002c92 <UART_SetConfig+0x7e>
 8002c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4bc3      	ldr	r3, [pc, #780]	; (8002f9c <UART_SetConfig+0x388>)
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d103      	bne.n	8002c9a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c92:	f7fe ff9f 	bl	8001bd4 <HAL_RCC_GetPCLK2Freq>
 8002c96:	6778      	str	r0, [r7, #116]	; 0x74
 8002c98:	e002      	b.n	8002ca0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c9a:	f7fe ff87 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 8002c9e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca8:	f040 80b6 	bne.w	8002e18 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cae:	461c      	mov	r4, r3
 8002cb0:	f04f 0500 	mov.w	r5, #0
 8002cb4:	4622      	mov	r2, r4
 8002cb6:	462b      	mov	r3, r5
 8002cb8:	1891      	adds	r1, r2, r2
 8002cba:	6439      	str	r1, [r7, #64]	; 0x40
 8002cbc:	415b      	adcs	r3, r3
 8002cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cc4:	1912      	adds	r2, r2, r4
 8002cc6:	eb45 0303 	adc.w	r3, r5, r3
 8002cca:	f04f 0000 	mov.w	r0, #0
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	00d9      	lsls	r1, r3, #3
 8002cd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cd8:	00d0      	lsls	r0, r2, #3
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	1911      	adds	r1, r2, r4
 8002ce0:	6639      	str	r1, [r7, #96]	; 0x60
 8002ce2:	416b      	adcs	r3, r5
 8002ce4:	667b      	str	r3, [r7, #100]	; 0x64
 8002ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	461a      	mov	r2, r3
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	1891      	adds	r1, r2, r2
 8002cf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cf4:	415b      	adcs	r3, r3
 8002cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cfc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002d00:	f7fd fade 	bl	80002c0 <__aeabi_uldivmod>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4ba5      	ldr	r3, [pc, #660]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	011e      	lsls	r6, r3, #4
 8002d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d14:	461c      	mov	r4, r3
 8002d16:	f04f 0500 	mov.w	r5, #0
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	462b      	mov	r3, r5
 8002d1e:	1891      	adds	r1, r2, r2
 8002d20:	6339      	str	r1, [r7, #48]	; 0x30
 8002d22:	415b      	adcs	r3, r3
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
 8002d26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d2a:	1912      	adds	r2, r2, r4
 8002d2c:	eb45 0303 	adc.w	r3, r5, r3
 8002d30:	f04f 0000 	mov.w	r0, #0
 8002d34:	f04f 0100 	mov.w	r1, #0
 8002d38:	00d9      	lsls	r1, r3, #3
 8002d3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d3e:	00d0      	lsls	r0, r2, #3
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	1911      	adds	r1, r2, r4
 8002d46:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d48:	416b      	adcs	r3, r5
 8002d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	461a      	mov	r2, r3
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	1891      	adds	r1, r2, r2
 8002d58:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d5a:	415b      	adcs	r3, r3
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d62:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d66:	f7fd faab 	bl	80002c0 <__aeabi_uldivmod>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4b8c      	ldr	r3, [pc, #560]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002d70:	fba3 1302 	umull	r1, r3, r3, r2
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	2164      	movs	r1, #100	; 0x64
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	3332      	adds	r3, #50	; 0x32
 8002d82:	4a87      	ldr	r2, [pc, #540]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d90:	441e      	add	r6, r3
 8002d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d94:	4618      	mov	r0, r3
 8002d96:	f04f 0100 	mov.w	r1, #0
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	1894      	adds	r4, r2, r2
 8002da0:	623c      	str	r4, [r7, #32]
 8002da2:	415b      	adcs	r3, r3
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
 8002da6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002daa:	1812      	adds	r2, r2, r0
 8002dac:	eb41 0303 	adc.w	r3, r1, r3
 8002db0:	f04f 0400 	mov.w	r4, #0
 8002db4:	f04f 0500 	mov.w	r5, #0
 8002db8:	00dd      	lsls	r5, r3, #3
 8002dba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002dbe:	00d4      	lsls	r4, r2, #3
 8002dc0:	4622      	mov	r2, r4
 8002dc2:	462b      	mov	r3, r5
 8002dc4:	1814      	adds	r4, r2, r0
 8002dc6:	653c      	str	r4, [r7, #80]	; 0x50
 8002dc8:	414b      	adcs	r3, r1
 8002dca:	657b      	str	r3, [r7, #84]	; 0x54
 8002dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	1891      	adds	r1, r2, r2
 8002dd8:	61b9      	str	r1, [r7, #24]
 8002dda:	415b      	adcs	r3, r3
 8002ddc:	61fb      	str	r3, [r7, #28]
 8002dde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002de6:	f7fd fa6b 	bl	80002c0 <__aeabi_uldivmod>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4b6c      	ldr	r3, [pc, #432]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002df0:	fba3 1302 	umull	r1, r3, r3, r2
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	2164      	movs	r1, #100	; 0x64
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	3332      	adds	r3, #50	; 0x32
 8002e02:	4a67      	ldr	r2, [pc, #412]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	f003 0207 	and.w	r2, r3, #7
 8002e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4432      	add	r2, r6
 8002e14:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e16:	e0b9      	b.n	8002f8c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e1a:	461c      	mov	r4, r3
 8002e1c:	f04f 0500 	mov.w	r5, #0
 8002e20:	4622      	mov	r2, r4
 8002e22:	462b      	mov	r3, r5
 8002e24:	1891      	adds	r1, r2, r2
 8002e26:	6139      	str	r1, [r7, #16]
 8002e28:	415b      	adcs	r3, r3
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e30:	1912      	adds	r2, r2, r4
 8002e32:	eb45 0303 	adc.w	r3, r5, r3
 8002e36:	f04f 0000 	mov.w	r0, #0
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	00d9      	lsls	r1, r3, #3
 8002e40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e44:	00d0      	lsls	r0, r2, #3
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	eb12 0804 	adds.w	r8, r2, r4
 8002e4e:	eb43 0905 	adc.w	r9, r3, r5
 8002e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	008b      	lsls	r3, r1, #2
 8002e66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e6a:	0082      	lsls	r2, r0, #2
 8002e6c:	4640      	mov	r0, r8
 8002e6e:	4649      	mov	r1, r9
 8002e70:	f7fd fa26 	bl	80002c0 <__aeabi_uldivmod>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4b49      	ldr	r3, [pc, #292]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	011e      	lsls	r6, r3, #4
 8002e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e84:	4618      	mov	r0, r3
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	1894      	adds	r4, r2, r2
 8002e90:	60bc      	str	r4, [r7, #8]
 8002e92:	415b      	adcs	r3, r3
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e9a:	1812      	adds	r2, r2, r0
 8002e9c:	eb41 0303 	adc.w	r3, r1, r3
 8002ea0:	f04f 0400 	mov.w	r4, #0
 8002ea4:	f04f 0500 	mov.w	r5, #0
 8002ea8:	00dd      	lsls	r5, r3, #3
 8002eaa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002eae:	00d4      	lsls	r4, r2, #3
 8002eb0:	4622      	mov	r2, r4
 8002eb2:	462b      	mov	r3, r5
 8002eb4:	1814      	adds	r4, r2, r0
 8002eb6:	64bc      	str	r4, [r7, #72]	; 0x48
 8002eb8:	414b      	adcs	r3, r1
 8002eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f04f 0100 	mov.w	r1, #0
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	008b      	lsls	r3, r1, #2
 8002ed0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ed4:	0082      	lsls	r2, r0, #2
 8002ed6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002eda:	f7fd f9f1 	bl	80002c0 <__aeabi_uldivmod>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4b2f      	ldr	r3, [pc, #188]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	2164      	movs	r1, #100	; 0x64
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	3332      	adds	r3, #50	; 0x32
 8002ef6:	4a2a      	ldr	r2, [pc, #168]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f02:	441e      	add	r6, r3
 8002f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f06:	4618      	mov	r0, r3
 8002f08:	f04f 0100 	mov.w	r1, #0
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	1894      	adds	r4, r2, r2
 8002f12:	603c      	str	r4, [r7, #0]
 8002f14:	415b      	adcs	r3, r3
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f1c:	1812      	adds	r2, r2, r0
 8002f1e:	eb41 0303 	adc.w	r3, r1, r3
 8002f22:	f04f 0400 	mov.w	r4, #0
 8002f26:	f04f 0500 	mov.w	r5, #0
 8002f2a:	00dd      	lsls	r5, r3, #3
 8002f2c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f30:	00d4      	lsls	r4, r2, #3
 8002f32:	4622      	mov	r2, r4
 8002f34:	462b      	mov	r3, r5
 8002f36:	eb12 0a00 	adds.w	sl, r2, r0
 8002f3a:	eb43 0b01 	adc.w	fp, r3, r1
 8002f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f04f 0100 	mov.w	r1, #0
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	008b      	lsls	r3, r1, #2
 8002f52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f56:	0082      	lsls	r2, r0, #2
 8002f58:	4650      	mov	r0, sl
 8002f5a:	4659      	mov	r1, fp
 8002f5c:	f7fd f9b0 	bl	80002c0 <__aeabi_uldivmod>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002f66:	fba3 1302 	umull	r1, r3, r3, r2
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2164      	movs	r1, #100	; 0x64
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	3332      	adds	r3, #50	; 0x32
 8002f78:	4a09      	ldr	r2, [pc, #36]	; (8002fa0 <UART_SetConfig+0x38c>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	f003 020f 	and.w	r2, r3, #15
 8002f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4432      	add	r2, r6
 8002f8a:	609a      	str	r2, [r3, #8]
}
 8002f8c:	bf00      	nop
 8002f8e:	377c      	adds	r7, #124	; 0x7c
 8002f90:	46bd      	mov	sp, r7
 8002f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f96:	bf00      	nop
 8002f98:	40011000 	.word	0x40011000
 8002f9c:	40011400 	.word	0x40011400
 8002fa0:	51eb851f 	.word	0x51eb851f

08002fa4 <__errno>:
 8002fa4:	4b01      	ldr	r3, [pc, #4]	; (8002fac <__errno+0x8>)
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	2000000c 	.word	0x2000000c

08002fb0 <__libc_init_array>:
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	4d0d      	ldr	r5, [pc, #52]	; (8002fe8 <__libc_init_array+0x38>)
 8002fb4:	4c0d      	ldr	r4, [pc, #52]	; (8002fec <__libc_init_array+0x3c>)
 8002fb6:	1b64      	subs	r4, r4, r5
 8002fb8:	10a4      	asrs	r4, r4, #2
 8002fba:	2600      	movs	r6, #0
 8002fbc:	42a6      	cmp	r6, r4
 8002fbe:	d109      	bne.n	8002fd4 <__libc_init_array+0x24>
 8002fc0:	4d0b      	ldr	r5, [pc, #44]	; (8002ff0 <__libc_init_array+0x40>)
 8002fc2:	4c0c      	ldr	r4, [pc, #48]	; (8002ff4 <__libc_init_array+0x44>)
 8002fc4:	f000 fc64 	bl	8003890 <_init>
 8002fc8:	1b64      	subs	r4, r4, r5
 8002fca:	10a4      	asrs	r4, r4, #2
 8002fcc:	2600      	movs	r6, #0
 8002fce:	42a6      	cmp	r6, r4
 8002fd0:	d105      	bne.n	8002fde <__libc_init_array+0x2e>
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}
 8002fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd8:	4798      	blx	r3
 8002fda:	3601      	adds	r6, #1
 8002fdc:	e7ee      	b.n	8002fbc <__libc_init_array+0xc>
 8002fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe2:	4798      	blx	r3
 8002fe4:	3601      	adds	r6, #1
 8002fe6:	e7f2      	b.n	8002fce <__libc_init_array+0x1e>
 8002fe8:	08003938 	.word	0x08003938
 8002fec:	08003938 	.word	0x08003938
 8002ff0:	08003938 	.word	0x08003938
 8002ff4:	0800393c 	.word	0x0800393c

08002ff8 <memcpy>:
 8002ff8:	440a      	add	r2, r1
 8002ffa:	4291      	cmp	r1, r2
 8002ffc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003000:	d100      	bne.n	8003004 <memcpy+0xc>
 8003002:	4770      	bx	lr
 8003004:	b510      	push	{r4, lr}
 8003006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800300a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800300e:	4291      	cmp	r1, r2
 8003010:	d1f9      	bne.n	8003006 <memcpy+0xe>
 8003012:	bd10      	pop	{r4, pc}

08003014 <memset>:
 8003014:	4402      	add	r2, r0
 8003016:	4603      	mov	r3, r0
 8003018:	4293      	cmp	r3, r2
 800301a:	d100      	bne.n	800301e <memset+0xa>
 800301c:	4770      	bx	lr
 800301e:	f803 1b01 	strb.w	r1, [r3], #1
 8003022:	e7f9      	b.n	8003018 <memset+0x4>

08003024 <siprintf>:
 8003024:	b40e      	push	{r1, r2, r3}
 8003026:	b500      	push	{lr}
 8003028:	b09c      	sub	sp, #112	; 0x70
 800302a:	ab1d      	add	r3, sp, #116	; 0x74
 800302c:	9002      	str	r0, [sp, #8]
 800302e:	9006      	str	r0, [sp, #24]
 8003030:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003034:	4809      	ldr	r0, [pc, #36]	; (800305c <siprintf+0x38>)
 8003036:	9107      	str	r1, [sp, #28]
 8003038:	9104      	str	r1, [sp, #16]
 800303a:	4909      	ldr	r1, [pc, #36]	; (8003060 <siprintf+0x3c>)
 800303c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003040:	9105      	str	r1, [sp, #20]
 8003042:	6800      	ldr	r0, [r0, #0]
 8003044:	9301      	str	r3, [sp, #4]
 8003046:	a902      	add	r1, sp, #8
 8003048:	f000 f87e 	bl	8003148 <_svfiprintf_r>
 800304c:	9b02      	ldr	r3, [sp, #8]
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	b01c      	add	sp, #112	; 0x70
 8003054:	f85d eb04 	ldr.w	lr, [sp], #4
 8003058:	b003      	add	sp, #12
 800305a:	4770      	bx	lr
 800305c:	2000000c 	.word	0x2000000c
 8003060:	ffff0208 	.word	0xffff0208

08003064 <strstr>:
 8003064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003066:	780c      	ldrb	r4, [r1, #0]
 8003068:	b164      	cbz	r4, 8003084 <strstr+0x20>
 800306a:	4603      	mov	r3, r0
 800306c:	781a      	ldrb	r2, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	1c5e      	adds	r6, r3, #1
 8003072:	b90a      	cbnz	r2, 8003078 <strstr+0x14>
 8003074:	4610      	mov	r0, r2
 8003076:	e005      	b.n	8003084 <strstr+0x20>
 8003078:	4294      	cmp	r4, r2
 800307a:	d108      	bne.n	800308e <strstr+0x2a>
 800307c:	460d      	mov	r5, r1
 800307e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003082:	b902      	cbnz	r2, 8003086 <strstr+0x22>
 8003084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003086:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800308a:	4297      	cmp	r7, r2
 800308c:	d0f7      	beq.n	800307e <strstr+0x1a>
 800308e:	4633      	mov	r3, r6
 8003090:	e7ec      	b.n	800306c <strstr+0x8>

08003092 <__ssputs_r>:
 8003092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003096:	688e      	ldr	r6, [r1, #8]
 8003098:	429e      	cmp	r6, r3
 800309a:	4682      	mov	sl, r0
 800309c:	460c      	mov	r4, r1
 800309e:	4690      	mov	r8, r2
 80030a0:	461f      	mov	r7, r3
 80030a2:	d838      	bhi.n	8003116 <__ssputs_r+0x84>
 80030a4:	898a      	ldrh	r2, [r1, #12]
 80030a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030aa:	d032      	beq.n	8003112 <__ssputs_r+0x80>
 80030ac:	6825      	ldr	r5, [r4, #0]
 80030ae:	6909      	ldr	r1, [r1, #16]
 80030b0:	eba5 0901 	sub.w	r9, r5, r1
 80030b4:	6965      	ldr	r5, [r4, #20]
 80030b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030be:	3301      	adds	r3, #1
 80030c0:	444b      	add	r3, r9
 80030c2:	106d      	asrs	r5, r5, #1
 80030c4:	429d      	cmp	r5, r3
 80030c6:	bf38      	it	cc
 80030c8:	461d      	movcc	r5, r3
 80030ca:	0553      	lsls	r3, r2, #21
 80030cc:	d531      	bpl.n	8003132 <__ssputs_r+0xa0>
 80030ce:	4629      	mov	r1, r5
 80030d0:	f000 fb38 	bl	8003744 <_malloc_r>
 80030d4:	4606      	mov	r6, r0
 80030d6:	b950      	cbnz	r0, 80030ee <__ssputs_r+0x5c>
 80030d8:	230c      	movs	r3, #12
 80030da:	f8ca 3000 	str.w	r3, [sl]
 80030de:	89a3      	ldrh	r3, [r4, #12]
 80030e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030e4:	81a3      	strh	r3, [r4, #12]
 80030e6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ee:	6921      	ldr	r1, [r4, #16]
 80030f0:	464a      	mov	r2, r9
 80030f2:	f7ff ff81 	bl	8002ff8 <memcpy>
 80030f6:	89a3      	ldrh	r3, [r4, #12]
 80030f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003100:	81a3      	strh	r3, [r4, #12]
 8003102:	6126      	str	r6, [r4, #16]
 8003104:	6165      	str	r5, [r4, #20]
 8003106:	444e      	add	r6, r9
 8003108:	eba5 0509 	sub.w	r5, r5, r9
 800310c:	6026      	str	r6, [r4, #0]
 800310e:	60a5      	str	r5, [r4, #8]
 8003110:	463e      	mov	r6, r7
 8003112:	42be      	cmp	r6, r7
 8003114:	d900      	bls.n	8003118 <__ssputs_r+0x86>
 8003116:	463e      	mov	r6, r7
 8003118:	4632      	mov	r2, r6
 800311a:	6820      	ldr	r0, [r4, #0]
 800311c:	4641      	mov	r1, r8
 800311e:	f000 faa7 	bl	8003670 <memmove>
 8003122:	68a3      	ldr	r3, [r4, #8]
 8003124:	6822      	ldr	r2, [r4, #0]
 8003126:	1b9b      	subs	r3, r3, r6
 8003128:	4432      	add	r2, r6
 800312a:	60a3      	str	r3, [r4, #8]
 800312c:	6022      	str	r2, [r4, #0]
 800312e:	2000      	movs	r0, #0
 8003130:	e7db      	b.n	80030ea <__ssputs_r+0x58>
 8003132:	462a      	mov	r2, r5
 8003134:	f000 fb60 	bl	80037f8 <_realloc_r>
 8003138:	4606      	mov	r6, r0
 800313a:	2800      	cmp	r0, #0
 800313c:	d1e1      	bne.n	8003102 <__ssputs_r+0x70>
 800313e:	6921      	ldr	r1, [r4, #16]
 8003140:	4650      	mov	r0, sl
 8003142:	f000 faaf 	bl	80036a4 <_free_r>
 8003146:	e7c7      	b.n	80030d8 <__ssputs_r+0x46>

08003148 <_svfiprintf_r>:
 8003148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800314c:	4698      	mov	r8, r3
 800314e:	898b      	ldrh	r3, [r1, #12]
 8003150:	061b      	lsls	r3, r3, #24
 8003152:	b09d      	sub	sp, #116	; 0x74
 8003154:	4607      	mov	r7, r0
 8003156:	460d      	mov	r5, r1
 8003158:	4614      	mov	r4, r2
 800315a:	d50e      	bpl.n	800317a <_svfiprintf_r+0x32>
 800315c:	690b      	ldr	r3, [r1, #16]
 800315e:	b963      	cbnz	r3, 800317a <_svfiprintf_r+0x32>
 8003160:	2140      	movs	r1, #64	; 0x40
 8003162:	f000 faef 	bl	8003744 <_malloc_r>
 8003166:	6028      	str	r0, [r5, #0]
 8003168:	6128      	str	r0, [r5, #16]
 800316a:	b920      	cbnz	r0, 8003176 <_svfiprintf_r+0x2e>
 800316c:	230c      	movs	r3, #12
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	e0d1      	b.n	800331a <_svfiprintf_r+0x1d2>
 8003176:	2340      	movs	r3, #64	; 0x40
 8003178:	616b      	str	r3, [r5, #20]
 800317a:	2300      	movs	r3, #0
 800317c:	9309      	str	r3, [sp, #36]	; 0x24
 800317e:	2320      	movs	r3, #32
 8003180:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003184:	f8cd 800c 	str.w	r8, [sp, #12]
 8003188:	2330      	movs	r3, #48	; 0x30
 800318a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003334 <_svfiprintf_r+0x1ec>
 800318e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003192:	f04f 0901 	mov.w	r9, #1
 8003196:	4623      	mov	r3, r4
 8003198:	469a      	mov	sl, r3
 800319a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800319e:	b10a      	cbz	r2, 80031a4 <_svfiprintf_r+0x5c>
 80031a0:	2a25      	cmp	r2, #37	; 0x25
 80031a2:	d1f9      	bne.n	8003198 <_svfiprintf_r+0x50>
 80031a4:	ebba 0b04 	subs.w	fp, sl, r4
 80031a8:	d00b      	beq.n	80031c2 <_svfiprintf_r+0x7a>
 80031aa:	465b      	mov	r3, fp
 80031ac:	4622      	mov	r2, r4
 80031ae:	4629      	mov	r1, r5
 80031b0:	4638      	mov	r0, r7
 80031b2:	f7ff ff6e 	bl	8003092 <__ssputs_r>
 80031b6:	3001      	adds	r0, #1
 80031b8:	f000 80aa 	beq.w	8003310 <_svfiprintf_r+0x1c8>
 80031bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031be:	445a      	add	r2, fp
 80031c0:	9209      	str	r2, [sp, #36]	; 0x24
 80031c2:	f89a 3000 	ldrb.w	r3, [sl]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 80a2 	beq.w	8003310 <_svfiprintf_r+0x1c8>
 80031cc:	2300      	movs	r3, #0
 80031ce:	f04f 32ff 	mov.w	r2, #4294967295
 80031d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031d6:	f10a 0a01 	add.w	sl, sl, #1
 80031da:	9304      	str	r3, [sp, #16]
 80031dc:	9307      	str	r3, [sp, #28]
 80031de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031e2:	931a      	str	r3, [sp, #104]	; 0x68
 80031e4:	4654      	mov	r4, sl
 80031e6:	2205      	movs	r2, #5
 80031e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031ec:	4851      	ldr	r0, [pc, #324]	; (8003334 <_svfiprintf_r+0x1ec>)
 80031ee:	f7fd f817 	bl	8000220 <memchr>
 80031f2:	9a04      	ldr	r2, [sp, #16]
 80031f4:	b9d8      	cbnz	r0, 800322e <_svfiprintf_r+0xe6>
 80031f6:	06d0      	lsls	r0, r2, #27
 80031f8:	bf44      	itt	mi
 80031fa:	2320      	movmi	r3, #32
 80031fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003200:	0711      	lsls	r1, r2, #28
 8003202:	bf44      	itt	mi
 8003204:	232b      	movmi	r3, #43	; 0x2b
 8003206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800320a:	f89a 3000 	ldrb.w	r3, [sl]
 800320e:	2b2a      	cmp	r3, #42	; 0x2a
 8003210:	d015      	beq.n	800323e <_svfiprintf_r+0xf6>
 8003212:	9a07      	ldr	r2, [sp, #28]
 8003214:	4654      	mov	r4, sl
 8003216:	2000      	movs	r0, #0
 8003218:	f04f 0c0a 	mov.w	ip, #10
 800321c:	4621      	mov	r1, r4
 800321e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003222:	3b30      	subs	r3, #48	; 0x30
 8003224:	2b09      	cmp	r3, #9
 8003226:	d94e      	bls.n	80032c6 <_svfiprintf_r+0x17e>
 8003228:	b1b0      	cbz	r0, 8003258 <_svfiprintf_r+0x110>
 800322a:	9207      	str	r2, [sp, #28]
 800322c:	e014      	b.n	8003258 <_svfiprintf_r+0x110>
 800322e:	eba0 0308 	sub.w	r3, r0, r8
 8003232:	fa09 f303 	lsl.w	r3, r9, r3
 8003236:	4313      	orrs	r3, r2
 8003238:	9304      	str	r3, [sp, #16]
 800323a:	46a2      	mov	sl, r4
 800323c:	e7d2      	b.n	80031e4 <_svfiprintf_r+0x9c>
 800323e:	9b03      	ldr	r3, [sp, #12]
 8003240:	1d19      	adds	r1, r3, #4
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	9103      	str	r1, [sp, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	bfbb      	ittet	lt
 800324a:	425b      	neglt	r3, r3
 800324c:	f042 0202 	orrlt.w	r2, r2, #2
 8003250:	9307      	strge	r3, [sp, #28]
 8003252:	9307      	strlt	r3, [sp, #28]
 8003254:	bfb8      	it	lt
 8003256:	9204      	strlt	r2, [sp, #16]
 8003258:	7823      	ldrb	r3, [r4, #0]
 800325a:	2b2e      	cmp	r3, #46	; 0x2e
 800325c:	d10c      	bne.n	8003278 <_svfiprintf_r+0x130>
 800325e:	7863      	ldrb	r3, [r4, #1]
 8003260:	2b2a      	cmp	r3, #42	; 0x2a
 8003262:	d135      	bne.n	80032d0 <_svfiprintf_r+0x188>
 8003264:	9b03      	ldr	r3, [sp, #12]
 8003266:	1d1a      	adds	r2, r3, #4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	9203      	str	r2, [sp, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	bfb8      	it	lt
 8003270:	f04f 33ff 	movlt.w	r3, #4294967295
 8003274:	3402      	adds	r4, #2
 8003276:	9305      	str	r3, [sp, #20]
 8003278:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003344 <_svfiprintf_r+0x1fc>
 800327c:	7821      	ldrb	r1, [r4, #0]
 800327e:	2203      	movs	r2, #3
 8003280:	4650      	mov	r0, sl
 8003282:	f7fc ffcd 	bl	8000220 <memchr>
 8003286:	b140      	cbz	r0, 800329a <_svfiprintf_r+0x152>
 8003288:	2340      	movs	r3, #64	; 0x40
 800328a:	eba0 000a 	sub.w	r0, r0, sl
 800328e:	fa03 f000 	lsl.w	r0, r3, r0
 8003292:	9b04      	ldr	r3, [sp, #16]
 8003294:	4303      	orrs	r3, r0
 8003296:	3401      	adds	r4, #1
 8003298:	9304      	str	r3, [sp, #16]
 800329a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800329e:	4826      	ldr	r0, [pc, #152]	; (8003338 <_svfiprintf_r+0x1f0>)
 80032a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032a4:	2206      	movs	r2, #6
 80032a6:	f7fc ffbb 	bl	8000220 <memchr>
 80032aa:	2800      	cmp	r0, #0
 80032ac:	d038      	beq.n	8003320 <_svfiprintf_r+0x1d8>
 80032ae:	4b23      	ldr	r3, [pc, #140]	; (800333c <_svfiprintf_r+0x1f4>)
 80032b0:	bb1b      	cbnz	r3, 80032fa <_svfiprintf_r+0x1b2>
 80032b2:	9b03      	ldr	r3, [sp, #12]
 80032b4:	3307      	adds	r3, #7
 80032b6:	f023 0307 	bic.w	r3, r3, #7
 80032ba:	3308      	adds	r3, #8
 80032bc:	9303      	str	r3, [sp, #12]
 80032be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032c0:	4433      	add	r3, r6
 80032c2:	9309      	str	r3, [sp, #36]	; 0x24
 80032c4:	e767      	b.n	8003196 <_svfiprintf_r+0x4e>
 80032c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80032ca:	460c      	mov	r4, r1
 80032cc:	2001      	movs	r0, #1
 80032ce:	e7a5      	b.n	800321c <_svfiprintf_r+0xd4>
 80032d0:	2300      	movs	r3, #0
 80032d2:	3401      	adds	r4, #1
 80032d4:	9305      	str	r3, [sp, #20]
 80032d6:	4619      	mov	r1, r3
 80032d8:	f04f 0c0a 	mov.w	ip, #10
 80032dc:	4620      	mov	r0, r4
 80032de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032e2:	3a30      	subs	r2, #48	; 0x30
 80032e4:	2a09      	cmp	r2, #9
 80032e6:	d903      	bls.n	80032f0 <_svfiprintf_r+0x1a8>
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0c5      	beq.n	8003278 <_svfiprintf_r+0x130>
 80032ec:	9105      	str	r1, [sp, #20]
 80032ee:	e7c3      	b.n	8003278 <_svfiprintf_r+0x130>
 80032f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80032f4:	4604      	mov	r4, r0
 80032f6:	2301      	movs	r3, #1
 80032f8:	e7f0      	b.n	80032dc <_svfiprintf_r+0x194>
 80032fa:	ab03      	add	r3, sp, #12
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	462a      	mov	r2, r5
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <_svfiprintf_r+0x1f8>)
 8003302:	a904      	add	r1, sp, #16
 8003304:	4638      	mov	r0, r7
 8003306:	f3af 8000 	nop.w
 800330a:	1c42      	adds	r2, r0, #1
 800330c:	4606      	mov	r6, r0
 800330e:	d1d6      	bne.n	80032be <_svfiprintf_r+0x176>
 8003310:	89ab      	ldrh	r3, [r5, #12]
 8003312:	065b      	lsls	r3, r3, #25
 8003314:	f53f af2c 	bmi.w	8003170 <_svfiprintf_r+0x28>
 8003318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800331a:	b01d      	add	sp, #116	; 0x74
 800331c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003320:	ab03      	add	r3, sp, #12
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	462a      	mov	r2, r5
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <_svfiprintf_r+0x1f8>)
 8003328:	a904      	add	r1, sp, #16
 800332a:	4638      	mov	r0, r7
 800332c:	f000 f87a 	bl	8003424 <_printf_i>
 8003330:	e7eb      	b.n	800330a <_svfiprintf_r+0x1c2>
 8003332:	bf00      	nop
 8003334:	080038fc 	.word	0x080038fc
 8003338:	08003906 	.word	0x08003906
 800333c:	00000000 	.word	0x00000000
 8003340:	08003093 	.word	0x08003093
 8003344:	08003902 	.word	0x08003902

08003348 <_printf_common>:
 8003348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800334c:	4616      	mov	r6, r2
 800334e:	4699      	mov	r9, r3
 8003350:	688a      	ldr	r2, [r1, #8]
 8003352:	690b      	ldr	r3, [r1, #16]
 8003354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003358:	4293      	cmp	r3, r2
 800335a:	bfb8      	it	lt
 800335c:	4613      	movlt	r3, r2
 800335e:	6033      	str	r3, [r6, #0]
 8003360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003364:	4607      	mov	r7, r0
 8003366:	460c      	mov	r4, r1
 8003368:	b10a      	cbz	r2, 800336e <_printf_common+0x26>
 800336a:	3301      	adds	r3, #1
 800336c:	6033      	str	r3, [r6, #0]
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	0699      	lsls	r1, r3, #26
 8003372:	bf42      	ittt	mi
 8003374:	6833      	ldrmi	r3, [r6, #0]
 8003376:	3302      	addmi	r3, #2
 8003378:	6033      	strmi	r3, [r6, #0]
 800337a:	6825      	ldr	r5, [r4, #0]
 800337c:	f015 0506 	ands.w	r5, r5, #6
 8003380:	d106      	bne.n	8003390 <_printf_common+0x48>
 8003382:	f104 0a19 	add.w	sl, r4, #25
 8003386:	68e3      	ldr	r3, [r4, #12]
 8003388:	6832      	ldr	r2, [r6, #0]
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	42ab      	cmp	r3, r5
 800338e:	dc26      	bgt.n	80033de <_printf_common+0x96>
 8003390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003394:	1e13      	subs	r3, r2, #0
 8003396:	6822      	ldr	r2, [r4, #0]
 8003398:	bf18      	it	ne
 800339a:	2301      	movne	r3, #1
 800339c:	0692      	lsls	r2, r2, #26
 800339e:	d42b      	bmi.n	80033f8 <_printf_common+0xb0>
 80033a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033a4:	4649      	mov	r1, r9
 80033a6:	4638      	mov	r0, r7
 80033a8:	47c0      	blx	r8
 80033aa:	3001      	adds	r0, #1
 80033ac:	d01e      	beq.n	80033ec <_printf_common+0xa4>
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	68e5      	ldr	r5, [r4, #12]
 80033b2:	6832      	ldr	r2, [r6, #0]
 80033b4:	f003 0306 	and.w	r3, r3, #6
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	bf08      	it	eq
 80033bc:	1aad      	subeq	r5, r5, r2
 80033be:	68a3      	ldr	r3, [r4, #8]
 80033c0:	6922      	ldr	r2, [r4, #16]
 80033c2:	bf0c      	ite	eq
 80033c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033c8:	2500      	movne	r5, #0
 80033ca:	4293      	cmp	r3, r2
 80033cc:	bfc4      	itt	gt
 80033ce:	1a9b      	subgt	r3, r3, r2
 80033d0:	18ed      	addgt	r5, r5, r3
 80033d2:	2600      	movs	r6, #0
 80033d4:	341a      	adds	r4, #26
 80033d6:	42b5      	cmp	r5, r6
 80033d8:	d11a      	bne.n	8003410 <_printf_common+0xc8>
 80033da:	2000      	movs	r0, #0
 80033dc:	e008      	b.n	80033f0 <_printf_common+0xa8>
 80033de:	2301      	movs	r3, #1
 80033e0:	4652      	mov	r2, sl
 80033e2:	4649      	mov	r1, r9
 80033e4:	4638      	mov	r0, r7
 80033e6:	47c0      	blx	r8
 80033e8:	3001      	adds	r0, #1
 80033ea:	d103      	bne.n	80033f4 <_printf_common+0xac>
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295
 80033f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f4:	3501      	adds	r5, #1
 80033f6:	e7c6      	b.n	8003386 <_printf_common+0x3e>
 80033f8:	18e1      	adds	r1, r4, r3
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	2030      	movs	r0, #48	; 0x30
 80033fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003402:	4422      	add	r2, r4
 8003404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800340c:	3302      	adds	r3, #2
 800340e:	e7c7      	b.n	80033a0 <_printf_common+0x58>
 8003410:	2301      	movs	r3, #1
 8003412:	4622      	mov	r2, r4
 8003414:	4649      	mov	r1, r9
 8003416:	4638      	mov	r0, r7
 8003418:	47c0      	blx	r8
 800341a:	3001      	adds	r0, #1
 800341c:	d0e6      	beq.n	80033ec <_printf_common+0xa4>
 800341e:	3601      	adds	r6, #1
 8003420:	e7d9      	b.n	80033d6 <_printf_common+0x8e>
	...

08003424 <_printf_i>:
 8003424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003428:	460c      	mov	r4, r1
 800342a:	4691      	mov	r9, r2
 800342c:	7e27      	ldrb	r7, [r4, #24]
 800342e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003430:	2f78      	cmp	r7, #120	; 0x78
 8003432:	4680      	mov	r8, r0
 8003434:	469a      	mov	sl, r3
 8003436:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800343a:	d807      	bhi.n	800344c <_printf_i+0x28>
 800343c:	2f62      	cmp	r7, #98	; 0x62
 800343e:	d80a      	bhi.n	8003456 <_printf_i+0x32>
 8003440:	2f00      	cmp	r7, #0
 8003442:	f000 80d8 	beq.w	80035f6 <_printf_i+0x1d2>
 8003446:	2f58      	cmp	r7, #88	; 0x58
 8003448:	f000 80a3 	beq.w	8003592 <_printf_i+0x16e>
 800344c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003454:	e03a      	b.n	80034cc <_printf_i+0xa8>
 8003456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800345a:	2b15      	cmp	r3, #21
 800345c:	d8f6      	bhi.n	800344c <_printf_i+0x28>
 800345e:	a001      	add	r0, pc, #4	; (adr r0, 8003464 <_printf_i+0x40>)
 8003460:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003464:	080034bd 	.word	0x080034bd
 8003468:	080034d1 	.word	0x080034d1
 800346c:	0800344d 	.word	0x0800344d
 8003470:	0800344d 	.word	0x0800344d
 8003474:	0800344d 	.word	0x0800344d
 8003478:	0800344d 	.word	0x0800344d
 800347c:	080034d1 	.word	0x080034d1
 8003480:	0800344d 	.word	0x0800344d
 8003484:	0800344d 	.word	0x0800344d
 8003488:	0800344d 	.word	0x0800344d
 800348c:	0800344d 	.word	0x0800344d
 8003490:	080035dd 	.word	0x080035dd
 8003494:	08003501 	.word	0x08003501
 8003498:	080035bf 	.word	0x080035bf
 800349c:	0800344d 	.word	0x0800344d
 80034a0:	0800344d 	.word	0x0800344d
 80034a4:	080035ff 	.word	0x080035ff
 80034a8:	0800344d 	.word	0x0800344d
 80034ac:	08003501 	.word	0x08003501
 80034b0:	0800344d 	.word	0x0800344d
 80034b4:	0800344d 	.word	0x0800344d
 80034b8:	080035c7 	.word	0x080035c7
 80034bc:	680b      	ldr	r3, [r1, #0]
 80034be:	1d1a      	adds	r2, r3, #4
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	600a      	str	r2, [r1, #0]
 80034c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80034c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0a3      	b.n	8003618 <_printf_i+0x1f4>
 80034d0:	6825      	ldr	r5, [r4, #0]
 80034d2:	6808      	ldr	r0, [r1, #0]
 80034d4:	062e      	lsls	r6, r5, #24
 80034d6:	f100 0304 	add.w	r3, r0, #4
 80034da:	d50a      	bpl.n	80034f2 <_printf_i+0xce>
 80034dc:	6805      	ldr	r5, [r0, #0]
 80034de:	600b      	str	r3, [r1, #0]
 80034e0:	2d00      	cmp	r5, #0
 80034e2:	da03      	bge.n	80034ec <_printf_i+0xc8>
 80034e4:	232d      	movs	r3, #45	; 0x2d
 80034e6:	426d      	negs	r5, r5
 80034e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034ec:	485e      	ldr	r0, [pc, #376]	; (8003668 <_printf_i+0x244>)
 80034ee:	230a      	movs	r3, #10
 80034f0:	e019      	b.n	8003526 <_printf_i+0x102>
 80034f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80034f6:	6805      	ldr	r5, [r0, #0]
 80034f8:	600b      	str	r3, [r1, #0]
 80034fa:	bf18      	it	ne
 80034fc:	b22d      	sxthne	r5, r5
 80034fe:	e7ef      	b.n	80034e0 <_printf_i+0xbc>
 8003500:	680b      	ldr	r3, [r1, #0]
 8003502:	6825      	ldr	r5, [r4, #0]
 8003504:	1d18      	adds	r0, r3, #4
 8003506:	6008      	str	r0, [r1, #0]
 8003508:	0628      	lsls	r0, r5, #24
 800350a:	d501      	bpl.n	8003510 <_printf_i+0xec>
 800350c:	681d      	ldr	r5, [r3, #0]
 800350e:	e002      	b.n	8003516 <_printf_i+0xf2>
 8003510:	0669      	lsls	r1, r5, #25
 8003512:	d5fb      	bpl.n	800350c <_printf_i+0xe8>
 8003514:	881d      	ldrh	r5, [r3, #0]
 8003516:	4854      	ldr	r0, [pc, #336]	; (8003668 <_printf_i+0x244>)
 8003518:	2f6f      	cmp	r7, #111	; 0x6f
 800351a:	bf0c      	ite	eq
 800351c:	2308      	moveq	r3, #8
 800351e:	230a      	movne	r3, #10
 8003520:	2100      	movs	r1, #0
 8003522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003526:	6866      	ldr	r6, [r4, #4]
 8003528:	60a6      	str	r6, [r4, #8]
 800352a:	2e00      	cmp	r6, #0
 800352c:	bfa2      	ittt	ge
 800352e:	6821      	ldrge	r1, [r4, #0]
 8003530:	f021 0104 	bicge.w	r1, r1, #4
 8003534:	6021      	strge	r1, [r4, #0]
 8003536:	b90d      	cbnz	r5, 800353c <_printf_i+0x118>
 8003538:	2e00      	cmp	r6, #0
 800353a:	d04d      	beq.n	80035d8 <_printf_i+0x1b4>
 800353c:	4616      	mov	r6, r2
 800353e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003542:	fb03 5711 	mls	r7, r3, r1, r5
 8003546:	5dc7      	ldrb	r7, [r0, r7]
 8003548:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800354c:	462f      	mov	r7, r5
 800354e:	42bb      	cmp	r3, r7
 8003550:	460d      	mov	r5, r1
 8003552:	d9f4      	bls.n	800353e <_printf_i+0x11a>
 8003554:	2b08      	cmp	r3, #8
 8003556:	d10b      	bne.n	8003570 <_printf_i+0x14c>
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	07df      	lsls	r7, r3, #31
 800355c:	d508      	bpl.n	8003570 <_printf_i+0x14c>
 800355e:	6923      	ldr	r3, [r4, #16]
 8003560:	6861      	ldr	r1, [r4, #4]
 8003562:	4299      	cmp	r1, r3
 8003564:	bfde      	ittt	le
 8003566:	2330      	movle	r3, #48	; 0x30
 8003568:	f806 3c01 	strble.w	r3, [r6, #-1]
 800356c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003570:	1b92      	subs	r2, r2, r6
 8003572:	6122      	str	r2, [r4, #16]
 8003574:	f8cd a000 	str.w	sl, [sp]
 8003578:	464b      	mov	r3, r9
 800357a:	aa03      	add	r2, sp, #12
 800357c:	4621      	mov	r1, r4
 800357e:	4640      	mov	r0, r8
 8003580:	f7ff fee2 	bl	8003348 <_printf_common>
 8003584:	3001      	adds	r0, #1
 8003586:	d14c      	bne.n	8003622 <_printf_i+0x1fe>
 8003588:	f04f 30ff 	mov.w	r0, #4294967295
 800358c:	b004      	add	sp, #16
 800358e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003592:	4835      	ldr	r0, [pc, #212]	; (8003668 <_printf_i+0x244>)
 8003594:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	680e      	ldr	r6, [r1, #0]
 800359c:	061f      	lsls	r7, r3, #24
 800359e:	f856 5b04 	ldr.w	r5, [r6], #4
 80035a2:	600e      	str	r6, [r1, #0]
 80035a4:	d514      	bpl.n	80035d0 <_printf_i+0x1ac>
 80035a6:	07d9      	lsls	r1, r3, #31
 80035a8:	bf44      	itt	mi
 80035aa:	f043 0320 	orrmi.w	r3, r3, #32
 80035ae:	6023      	strmi	r3, [r4, #0]
 80035b0:	b91d      	cbnz	r5, 80035ba <_printf_i+0x196>
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	f023 0320 	bic.w	r3, r3, #32
 80035b8:	6023      	str	r3, [r4, #0]
 80035ba:	2310      	movs	r3, #16
 80035bc:	e7b0      	b.n	8003520 <_printf_i+0xfc>
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	f043 0320 	orr.w	r3, r3, #32
 80035c4:	6023      	str	r3, [r4, #0]
 80035c6:	2378      	movs	r3, #120	; 0x78
 80035c8:	4828      	ldr	r0, [pc, #160]	; (800366c <_printf_i+0x248>)
 80035ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035ce:	e7e3      	b.n	8003598 <_printf_i+0x174>
 80035d0:	065e      	lsls	r6, r3, #25
 80035d2:	bf48      	it	mi
 80035d4:	b2ad      	uxthmi	r5, r5
 80035d6:	e7e6      	b.n	80035a6 <_printf_i+0x182>
 80035d8:	4616      	mov	r6, r2
 80035da:	e7bb      	b.n	8003554 <_printf_i+0x130>
 80035dc:	680b      	ldr	r3, [r1, #0]
 80035de:	6826      	ldr	r6, [r4, #0]
 80035e0:	6960      	ldr	r0, [r4, #20]
 80035e2:	1d1d      	adds	r5, r3, #4
 80035e4:	600d      	str	r5, [r1, #0]
 80035e6:	0635      	lsls	r5, r6, #24
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	d501      	bpl.n	80035f0 <_printf_i+0x1cc>
 80035ec:	6018      	str	r0, [r3, #0]
 80035ee:	e002      	b.n	80035f6 <_printf_i+0x1d2>
 80035f0:	0671      	lsls	r1, r6, #25
 80035f2:	d5fb      	bpl.n	80035ec <_printf_i+0x1c8>
 80035f4:	8018      	strh	r0, [r3, #0]
 80035f6:	2300      	movs	r3, #0
 80035f8:	6123      	str	r3, [r4, #16]
 80035fa:	4616      	mov	r6, r2
 80035fc:	e7ba      	b.n	8003574 <_printf_i+0x150>
 80035fe:	680b      	ldr	r3, [r1, #0]
 8003600:	1d1a      	adds	r2, r3, #4
 8003602:	600a      	str	r2, [r1, #0]
 8003604:	681e      	ldr	r6, [r3, #0]
 8003606:	6862      	ldr	r2, [r4, #4]
 8003608:	2100      	movs	r1, #0
 800360a:	4630      	mov	r0, r6
 800360c:	f7fc fe08 	bl	8000220 <memchr>
 8003610:	b108      	cbz	r0, 8003616 <_printf_i+0x1f2>
 8003612:	1b80      	subs	r0, r0, r6
 8003614:	6060      	str	r0, [r4, #4]
 8003616:	6863      	ldr	r3, [r4, #4]
 8003618:	6123      	str	r3, [r4, #16]
 800361a:	2300      	movs	r3, #0
 800361c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003620:	e7a8      	b.n	8003574 <_printf_i+0x150>
 8003622:	6923      	ldr	r3, [r4, #16]
 8003624:	4632      	mov	r2, r6
 8003626:	4649      	mov	r1, r9
 8003628:	4640      	mov	r0, r8
 800362a:	47d0      	blx	sl
 800362c:	3001      	adds	r0, #1
 800362e:	d0ab      	beq.n	8003588 <_printf_i+0x164>
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	079b      	lsls	r3, r3, #30
 8003634:	d413      	bmi.n	800365e <_printf_i+0x23a>
 8003636:	68e0      	ldr	r0, [r4, #12]
 8003638:	9b03      	ldr	r3, [sp, #12]
 800363a:	4298      	cmp	r0, r3
 800363c:	bfb8      	it	lt
 800363e:	4618      	movlt	r0, r3
 8003640:	e7a4      	b.n	800358c <_printf_i+0x168>
 8003642:	2301      	movs	r3, #1
 8003644:	4632      	mov	r2, r6
 8003646:	4649      	mov	r1, r9
 8003648:	4640      	mov	r0, r8
 800364a:	47d0      	blx	sl
 800364c:	3001      	adds	r0, #1
 800364e:	d09b      	beq.n	8003588 <_printf_i+0x164>
 8003650:	3501      	adds	r5, #1
 8003652:	68e3      	ldr	r3, [r4, #12]
 8003654:	9903      	ldr	r1, [sp, #12]
 8003656:	1a5b      	subs	r3, r3, r1
 8003658:	42ab      	cmp	r3, r5
 800365a:	dcf2      	bgt.n	8003642 <_printf_i+0x21e>
 800365c:	e7eb      	b.n	8003636 <_printf_i+0x212>
 800365e:	2500      	movs	r5, #0
 8003660:	f104 0619 	add.w	r6, r4, #25
 8003664:	e7f5      	b.n	8003652 <_printf_i+0x22e>
 8003666:	bf00      	nop
 8003668:	0800390d 	.word	0x0800390d
 800366c:	0800391e 	.word	0x0800391e

08003670 <memmove>:
 8003670:	4288      	cmp	r0, r1
 8003672:	b510      	push	{r4, lr}
 8003674:	eb01 0402 	add.w	r4, r1, r2
 8003678:	d902      	bls.n	8003680 <memmove+0x10>
 800367a:	4284      	cmp	r4, r0
 800367c:	4623      	mov	r3, r4
 800367e:	d807      	bhi.n	8003690 <memmove+0x20>
 8003680:	1e43      	subs	r3, r0, #1
 8003682:	42a1      	cmp	r1, r4
 8003684:	d008      	beq.n	8003698 <memmove+0x28>
 8003686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800368a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800368e:	e7f8      	b.n	8003682 <memmove+0x12>
 8003690:	4402      	add	r2, r0
 8003692:	4601      	mov	r1, r0
 8003694:	428a      	cmp	r2, r1
 8003696:	d100      	bne.n	800369a <memmove+0x2a>
 8003698:	bd10      	pop	{r4, pc}
 800369a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800369e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036a2:	e7f7      	b.n	8003694 <memmove+0x24>

080036a4 <_free_r>:
 80036a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036a6:	2900      	cmp	r1, #0
 80036a8:	d048      	beq.n	800373c <_free_r+0x98>
 80036aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036ae:	9001      	str	r0, [sp, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f1a1 0404 	sub.w	r4, r1, #4
 80036b6:	bfb8      	it	lt
 80036b8:	18e4      	addlt	r4, r4, r3
 80036ba:	f000 f8d3 	bl	8003864 <__malloc_lock>
 80036be:	4a20      	ldr	r2, [pc, #128]	; (8003740 <_free_r+0x9c>)
 80036c0:	9801      	ldr	r0, [sp, #4]
 80036c2:	6813      	ldr	r3, [r2, #0]
 80036c4:	4615      	mov	r5, r2
 80036c6:	b933      	cbnz	r3, 80036d6 <_free_r+0x32>
 80036c8:	6063      	str	r3, [r4, #4]
 80036ca:	6014      	str	r4, [r2, #0]
 80036cc:	b003      	add	sp, #12
 80036ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036d2:	f000 b8cd 	b.w	8003870 <__malloc_unlock>
 80036d6:	42a3      	cmp	r3, r4
 80036d8:	d90b      	bls.n	80036f2 <_free_r+0x4e>
 80036da:	6821      	ldr	r1, [r4, #0]
 80036dc:	1862      	adds	r2, r4, r1
 80036de:	4293      	cmp	r3, r2
 80036e0:	bf04      	itt	eq
 80036e2:	681a      	ldreq	r2, [r3, #0]
 80036e4:	685b      	ldreq	r3, [r3, #4]
 80036e6:	6063      	str	r3, [r4, #4]
 80036e8:	bf04      	itt	eq
 80036ea:	1852      	addeq	r2, r2, r1
 80036ec:	6022      	streq	r2, [r4, #0]
 80036ee:	602c      	str	r4, [r5, #0]
 80036f0:	e7ec      	b.n	80036cc <_free_r+0x28>
 80036f2:	461a      	mov	r2, r3
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	b10b      	cbz	r3, 80036fc <_free_r+0x58>
 80036f8:	42a3      	cmp	r3, r4
 80036fa:	d9fa      	bls.n	80036f2 <_free_r+0x4e>
 80036fc:	6811      	ldr	r1, [r2, #0]
 80036fe:	1855      	adds	r5, r2, r1
 8003700:	42a5      	cmp	r5, r4
 8003702:	d10b      	bne.n	800371c <_free_r+0x78>
 8003704:	6824      	ldr	r4, [r4, #0]
 8003706:	4421      	add	r1, r4
 8003708:	1854      	adds	r4, r2, r1
 800370a:	42a3      	cmp	r3, r4
 800370c:	6011      	str	r1, [r2, #0]
 800370e:	d1dd      	bne.n	80036cc <_free_r+0x28>
 8003710:	681c      	ldr	r4, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	6053      	str	r3, [r2, #4]
 8003716:	4421      	add	r1, r4
 8003718:	6011      	str	r1, [r2, #0]
 800371a:	e7d7      	b.n	80036cc <_free_r+0x28>
 800371c:	d902      	bls.n	8003724 <_free_r+0x80>
 800371e:	230c      	movs	r3, #12
 8003720:	6003      	str	r3, [r0, #0]
 8003722:	e7d3      	b.n	80036cc <_free_r+0x28>
 8003724:	6825      	ldr	r5, [r4, #0]
 8003726:	1961      	adds	r1, r4, r5
 8003728:	428b      	cmp	r3, r1
 800372a:	bf04      	itt	eq
 800372c:	6819      	ldreq	r1, [r3, #0]
 800372e:	685b      	ldreq	r3, [r3, #4]
 8003730:	6063      	str	r3, [r4, #4]
 8003732:	bf04      	itt	eq
 8003734:	1949      	addeq	r1, r1, r5
 8003736:	6021      	streq	r1, [r4, #0]
 8003738:	6054      	str	r4, [r2, #4]
 800373a:	e7c7      	b.n	80036cc <_free_r+0x28>
 800373c:	b003      	add	sp, #12
 800373e:	bd30      	pop	{r4, r5, pc}
 8003740:	20000090 	.word	0x20000090

08003744 <_malloc_r>:
 8003744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003746:	1ccd      	adds	r5, r1, #3
 8003748:	f025 0503 	bic.w	r5, r5, #3
 800374c:	3508      	adds	r5, #8
 800374e:	2d0c      	cmp	r5, #12
 8003750:	bf38      	it	cc
 8003752:	250c      	movcc	r5, #12
 8003754:	2d00      	cmp	r5, #0
 8003756:	4606      	mov	r6, r0
 8003758:	db01      	blt.n	800375e <_malloc_r+0x1a>
 800375a:	42a9      	cmp	r1, r5
 800375c:	d903      	bls.n	8003766 <_malloc_r+0x22>
 800375e:	230c      	movs	r3, #12
 8003760:	6033      	str	r3, [r6, #0]
 8003762:	2000      	movs	r0, #0
 8003764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003766:	f000 f87d 	bl	8003864 <__malloc_lock>
 800376a:	4921      	ldr	r1, [pc, #132]	; (80037f0 <_malloc_r+0xac>)
 800376c:	680a      	ldr	r2, [r1, #0]
 800376e:	4614      	mov	r4, r2
 8003770:	b99c      	cbnz	r4, 800379a <_malloc_r+0x56>
 8003772:	4f20      	ldr	r7, [pc, #128]	; (80037f4 <_malloc_r+0xb0>)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	b923      	cbnz	r3, 8003782 <_malloc_r+0x3e>
 8003778:	4621      	mov	r1, r4
 800377a:	4630      	mov	r0, r6
 800377c:	f000 f862 	bl	8003844 <_sbrk_r>
 8003780:	6038      	str	r0, [r7, #0]
 8003782:	4629      	mov	r1, r5
 8003784:	4630      	mov	r0, r6
 8003786:	f000 f85d 	bl	8003844 <_sbrk_r>
 800378a:	1c43      	adds	r3, r0, #1
 800378c:	d123      	bne.n	80037d6 <_malloc_r+0x92>
 800378e:	230c      	movs	r3, #12
 8003790:	6033      	str	r3, [r6, #0]
 8003792:	4630      	mov	r0, r6
 8003794:	f000 f86c 	bl	8003870 <__malloc_unlock>
 8003798:	e7e3      	b.n	8003762 <_malloc_r+0x1e>
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	1b5b      	subs	r3, r3, r5
 800379e:	d417      	bmi.n	80037d0 <_malloc_r+0x8c>
 80037a0:	2b0b      	cmp	r3, #11
 80037a2:	d903      	bls.n	80037ac <_malloc_r+0x68>
 80037a4:	6023      	str	r3, [r4, #0]
 80037a6:	441c      	add	r4, r3
 80037a8:	6025      	str	r5, [r4, #0]
 80037aa:	e004      	b.n	80037b6 <_malloc_r+0x72>
 80037ac:	6863      	ldr	r3, [r4, #4]
 80037ae:	42a2      	cmp	r2, r4
 80037b0:	bf0c      	ite	eq
 80037b2:	600b      	streq	r3, [r1, #0]
 80037b4:	6053      	strne	r3, [r2, #4]
 80037b6:	4630      	mov	r0, r6
 80037b8:	f000 f85a 	bl	8003870 <__malloc_unlock>
 80037bc:	f104 000b 	add.w	r0, r4, #11
 80037c0:	1d23      	adds	r3, r4, #4
 80037c2:	f020 0007 	bic.w	r0, r0, #7
 80037c6:	1ac2      	subs	r2, r0, r3
 80037c8:	d0cc      	beq.n	8003764 <_malloc_r+0x20>
 80037ca:	1a1b      	subs	r3, r3, r0
 80037cc:	50a3      	str	r3, [r4, r2]
 80037ce:	e7c9      	b.n	8003764 <_malloc_r+0x20>
 80037d0:	4622      	mov	r2, r4
 80037d2:	6864      	ldr	r4, [r4, #4]
 80037d4:	e7cc      	b.n	8003770 <_malloc_r+0x2c>
 80037d6:	1cc4      	adds	r4, r0, #3
 80037d8:	f024 0403 	bic.w	r4, r4, #3
 80037dc:	42a0      	cmp	r0, r4
 80037de:	d0e3      	beq.n	80037a8 <_malloc_r+0x64>
 80037e0:	1a21      	subs	r1, r4, r0
 80037e2:	4630      	mov	r0, r6
 80037e4:	f000 f82e 	bl	8003844 <_sbrk_r>
 80037e8:	3001      	adds	r0, #1
 80037ea:	d1dd      	bne.n	80037a8 <_malloc_r+0x64>
 80037ec:	e7cf      	b.n	800378e <_malloc_r+0x4a>
 80037ee:	bf00      	nop
 80037f0:	20000090 	.word	0x20000090
 80037f4:	20000094 	.word	0x20000094

080037f8 <_realloc_r>:
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	4607      	mov	r7, r0
 80037fc:	4614      	mov	r4, r2
 80037fe:	460e      	mov	r6, r1
 8003800:	b921      	cbnz	r1, 800380c <_realloc_r+0x14>
 8003802:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003806:	4611      	mov	r1, r2
 8003808:	f7ff bf9c 	b.w	8003744 <_malloc_r>
 800380c:	b922      	cbnz	r2, 8003818 <_realloc_r+0x20>
 800380e:	f7ff ff49 	bl	80036a4 <_free_r>
 8003812:	4625      	mov	r5, r4
 8003814:	4628      	mov	r0, r5
 8003816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003818:	f000 f830 	bl	800387c <_malloc_usable_size_r>
 800381c:	42a0      	cmp	r0, r4
 800381e:	d20f      	bcs.n	8003840 <_realloc_r+0x48>
 8003820:	4621      	mov	r1, r4
 8003822:	4638      	mov	r0, r7
 8003824:	f7ff ff8e 	bl	8003744 <_malloc_r>
 8003828:	4605      	mov	r5, r0
 800382a:	2800      	cmp	r0, #0
 800382c:	d0f2      	beq.n	8003814 <_realloc_r+0x1c>
 800382e:	4631      	mov	r1, r6
 8003830:	4622      	mov	r2, r4
 8003832:	f7ff fbe1 	bl	8002ff8 <memcpy>
 8003836:	4631      	mov	r1, r6
 8003838:	4638      	mov	r0, r7
 800383a:	f7ff ff33 	bl	80036a4 <_free_r>
 800383e:	e7e9      	b.n	8003814 <_realloc_r+0x1c>
 8003840:	4635      	mov	r5, r6
 8003842:	e7e7      	b.n	8003814 <_realloc_r+0x1c>

08003844 <_sbrk_r>:
 8003844:	b538      	push	{r3, r4, r5, lr}
 8003846:	4d06      	ldr	r5, [pc, #24]	; (8003860 <_sbrk_r+0x1c>)
 8003848:	2300      	movs	r3, #0
 800384a:	4604      	mov	r4, r0
 800384c:	4608      	mov	r0, r1
 800384e:	602b      	str	r3, [r5, #0]
 8003850:	f7fd f9a6 	bl	8000ba0 <_sbrk>
 8003854:	1c43      	adds	r3, r0, #1
 8003856:	d102      	bne.n	800385e <_sbrk_r+0x1a>
 8003858:	682b      	ldr	r3, [r5, #0]
 800385a:	b103      	cbz	r3, 800385e <_sbrk_r+0x1a>
 800385c:	6023      	str	r3, [r4, #0]
 800385e:	bd38      	pop	{r3, r4, r5, pc}
 8003860:	20000634 	.word	0x20000634

08003864 <__malloc_lock>:
 8003864:	4801      	ldr	r0, [pc, #4]	; (800386c <__malloc_lock+0x8>)
 8003866:	f000 b811 	b.w	800388c <__retarget_lock_acquire_recursive>
 800386a:	bf00      	nop
 800386c:	2000063c 	.word	0x2000063c

08003870 <__malloc_unlock>:
 8003870:	4801      	ldr	r0, [pc, #4]	; (8003878 <__malloc_unlock+0x8>)
 8003872:	f000 b80c 	b.w	800388e <__retarget_lock_release_recursive>
 8003876:	bf00      	nop
 8003878:	2000063c 	.word	0x2000063c

0800387c <_malloc_usable_size_r>:
 800387c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003880:	1f18      	subs	r0, r3, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	bfbc      	itt	lt
 8003886:	580b      	ldrlt	r3, [r1, r0]
 8003888:	18c0      	addlt	r0, r0, r3
 800388a:	4770      	bx	lr

0800388c <__retarget_lock_acquire_recursive>:
 800388c:	4770      	bx	lr

0800388e <__retarget_lock_release_recursive>:
 800388e:	4770      	bx	lr

08003890 <_init>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	bf00      	nop
 8003894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003896:	bc08      	pop	{r3}
 8003898:	469e      	mov	lr, r3
 800389a:	4770      	bx	lr

0800389c <_fini>:
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389e:	bf00      	nop
 80038a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a2:	bc08      	pop	{r3}
 80038a4:	469e      	mov	lr, r3
 80038a6:	4770      	bx	lr
